<?xml version="1.0" encoding="ISO-8859-1"?>
<screen conversionType="Hash">
<property name="Screen Width" value="668"/>
<property name="screenTitle" value=""/>
<bean>
<property name="InstanceName" value="Top"/>
<property name="ExtraCode" value=""/>
<property name="ClassName" value="javax.swing.JPanel"/>
<property name="Layout Manager" value="Border Layout"/>
<property name="Layout Constraints" value="Center"/>
<property name="Panel" value="container"/>
<property name="Layout Manager Constraints" value="1,1"/>
</bean>
<bean>
<property name="PopupMenu" value="none"/>
<property name="Initializer" value="new javax.swing.JPanel();"/>
<property name="Layout Manager Constraints" value="2,2"/>
<property name="ExtraCode" value=""/>
<property name="Layout Constraints" value="Center"/>
<property name="DefaultSize" value="732,428"/>
<property name="Layout Manager" value="Card Layout"/>
<property name="PaddingSize" value="94,0"/>
<property name="InstanceName" value="CenterPanel"/>
<property name="PropertyOrder" value=",preferredSize,"/>
<property name="Bean Permissions" value="255"/>
<property name="preferredSize" value="630,420"/>
<property name="Panel" value="Top"/>
<property name="ClassName" value="javax.swing.JPanel"/>
<property name="Modifiers" value=""/>
</bean>
<bean>
<property name="Initializer" value="new javax.swing.JPanel();"/>
<property name="Layout Manager Constraints" value="0,0"/>
<property name="ExtraCode" value=""/>
<property name="Layout Constraints" value="RadioButtonPanel:0"/>
<property name="DefaultSize" value="648,368"/>
<property name="Layout Manager" value="Border Layout"/>
<property name="InstanceName" value="RadioButtonPanel"/>
<property name="PropertyOrder" value=",preferredSize,"/>
<property name="Bean Permissions" value="255"/>
<property name="preferredSize" value="630,350"/>
<property name="Panel" value="CenterPanel"/>
<property name="ClassName" value="javax.swing.JPanel"/>
<property name="Modifiers" value=""/>
</bean>
<bean>
<property name="Initializer" value="new javax.swing.JPanel();"/>
<property name="Layout Manager Constraints" value="0,0"/>
<property name="ExtraCode" value=""/>
<property name="Layout Constraints" value="TemplateParamsPanel:1"/>
<property name="DefaultSize" value="648,368"/>
<property name="Layout Manager" value="Border Layout"/>
<property name="InstanceName" value="TemplateParamsPanel"/>
<property name="PropertyOrder" value=",preferredSize,"/>
<property name="Bean Permissions" value="255"/>
<property name="preferredSize" value="630,350"/>
<property name="Panel" value="CenterPanel"/>
<property name="ClassName" value="javax.swing.JPanel"/>
<property name="Modifiers" value=""/>
</bean>
<bean>
<property name="Initializer" value="new javax.swing.JPanel();"/>
<property name="Layout Manager Constraints" value="0,0"/>
<property name="ExtraCode" value=""/>
<property name="Layout Constraints" value="FormsPanel:2"/>
<property name="DefaultSize" value="848,368"/>
<property name="Layout Manager" value="Border Layout"/>
<property name="InstanceName" value="FormsPanel"/>
<property name="PropertyOrder" value=",preferredSize,"/>
<property name="Bean Permissions" value="255"/>
<property name="preferredSize" value="630,350"/>
<property name="Panel" value="CenterPanel"/>
<property name="ClassName" value="javax.swing.JPanel"/>
<property name="Modifiers" value=""/>
</bean>
<bean>
<property name="Initializer" value="new javax.swing.JPanel();"/>
<property name="Layout Manager Constraints" value="0,0,1"/>
<property name="ExtraCode" value=""/>
<property name="Layout Constraints" value="ResultPanel:3"/>
<property name="DefaultSize" value="638,358"/>
<property name="Layout Manager" value="Flow Layout"/>
<property name="InstanceName" value="ResultPanel"/>
<property name="PropertyOrder" value=",preferredSize,"/>
<property name="Bean Permissions" value="255"/>
<property name="preferredSize" value="630,350"/>
<property name="Panel" value="CenterPanel"/>
<property name="ClassName" value="javax.swing.JPanel"/>
<property name="Modifiers" value=""/>
</bean>
<bean>
<property name="Initializer" value="new javax.swing.JPanel();"/>
<property name="Layout Manager Constraints" value="0,0"/>
<property name="ExtraCode" value=""/>
<property name="Layout Constraints" value="South"/>
<property name="DefaultSize" value="658,194"/>
<property name="Layout Manager" value="Border Layout"/>
<property name="PaddingSize" value="10,174"/>
<property name="InstanceName" value="SouthPanel"/>
<property name="PropertyOrder" value=",preferredSize,"/>
<property name="Bean Permissions" value="255"/>
<property name="preferredSize" value="640,-50"/>
<property name="Panel" value="Top"/>
<property name="ClassName" value="javax.swing.JPanel"/>
<property name="Modifiers" value=""/>
</bean>
<bean>
<property name="Initializer" value="new javax.swing.JScrollPane();"/>
<property name="Layout Manager Constraints" value=""/>
<property name="ExtraCode" value=""/>
<property name="maximumSize" value="32767,32767"/>
<property name="Layout Constraints" value="North"/>
<property name="minimumSize" value="29,45"/>
<property name="DefaultSize" value="632,63"/>
<property name="border" value="TitledBorder,[LineBorder,-16777216,1,false],Status,1,2,Dialog+1+12,-10066279"/>
<property name="Layout Manager" value="Viewport Layout"/>
<property name="PaddingSize" value="24,30"/>
<property name="InstanceName" value="statusScrollPane"/>
<property name="PropertyOrder" value=",border,maximumSize,minimumSize,preferredSize,"/>
<property name="Bean Permissions" value="255"/>
<property name="preferredSize" value="600,25"/>
<property name="Panel" value="SouthPanel"/>
<property name="ClassName" value="javax.swing.JScrollPane"/>
<property name="Modifiers" value=""/>
</bean>
<bean>
<property name="Initializer" value="new javax.swing.JTextArea();"/>
<property name="ExtraCode" value="statusTextArea.addFocusListener(this);"/>
<property name="DefaultSize" value="749,25"/>
<property name="opaque" value="false"/>
<property name="InstanceName" value="statusTextArea"/>
<property name="PropertyOrder" value=",wrapStyleWord,enabled,lineWrap,opaque,disabledTextColor,"/>
<property name="Bean Permissions" value="244"/>
<property name="enabled" value="false"/>
<property name="wrapStyleWord" value="true"/>
<property name="Panel" value="statusScrollPane"/>
<property name="ClassName" value="javax.swing.JTextArea"/>
<property name="disabledTextColor" value="-13421824"/>
<property name="lineWrap" value="true"/>
<property name="Modifiers" value=""/>
</bean>
<bean>
<property name="PopupMenu" value="none"/>
<property name="Initializer" value="new javax.swing.JPanel();"/>
<property name="Layout Manager Constraints" value="0,0"/>
<property name="ExtraCode" value=""/>
<property name="Layout Constraints" value="Center"/>
<property name="DefaultSize" value="632,120"/>
<property name="Layout Manager" value="Border Layout"/>
<property name="PaddingSize" value="24,62"/>
<property name="InstanceName" value="ButtonPanel"/>
<property name="PropertyOrder" value=",preferredSize,"/>
<property name="Bean Permissions" value="255"/>
<property name="preferredSize" value="600,50"/>
<property name="Panel" value="SouthPanel"/>
<property name="ClassName" value="javax.swing.JPanel"/>
<property name="Modifiers" value=""/>
</bean>
<bean>
<property name="Initializer" value="new javax.swing.JPanel();"/>
<property name="Layout Manager Constraints" value="5,0,1"/>
<property name="ExtraCode" value=""/>
<property name="Layout Constraints" value="South"/>
<property name="DefaultSize" value="614,55"/>
<property name="Layout Manager" value="Flow Layout"/>
<property name="PaddingSize" value="316,35"/>
<property name="InstanceName" value="JPanel2"/>
<property name="PropertyOrder" value=",preferredSize,"/>
<property name="Bean Permissions" value="255"/>
<property name="preferredSize" value="290,10"/>
<property name="Panel" value="ButtonPanel"/>
<property name="ClassName" value="javax.swing.JPanel"/>
<property name="Modifiers" value=""/>
</bean>
<bean>
<property name="Initializer" value="new javax.swing.JButton();"/>
<property name="PopupMenu" value="none"/>
<property name="ExtraCode" value="backButton.setVisible(false);"/>
<property name="font" value="Dialog+1+12"/>
<property name="Layout Constraints" value="0"/>
<property name="DefaultSize" value="71,35"/>
<property name="InstanceName" value="backButton"/>
<property name="PropertyOrder" value=",horizontalTextPosition,text,font,"/>
<property name="Bean Permissions" value="247"/>
<property name="Panel" value="JPanel2"/>
<property name="ClassName" value="javax.swing.JButton"/>
<property name="horizontalTextPosition" value="4"/>
<property name="text" value="Back"/>
<property name="Modifiers" value=""/>
</bean>
<bean>
<property name="Initializer" value="new javax.swing.JButton();"/>
<property name="ExtraCode" value=""/>
<property name="font" value="Dialog+1+12"/>
<property name="Layout Constraints" value="1"/>
<property name="DefaultSize" value="69,35"/>
<property name="InstanceName" value="nextButton"/>
<property name="PropertyOrder" value=",horizontalTextPosition,text,font,"/>
<property name="Bean Permissions" value="247"/>
<property name="Panel" value="JPanel2"/>
<property name="ClassName" value="javax.swing.JButton"/>
<property name="horizontalTextPosition" value="4"/>
<property name="text" value="Next"/>
<property name="Modifiers" value=""/>
</bean>
<bean>
<property name="Initializer" value="new javax.swing.JButton();"/>
<property name="ExtraCode" value="descriptionButton.setVisible(false);"/>
<property name="font" value="Dialog+1+12"/>
<property name="Layout Constraints" value="2"/>
<property name="DefaultSize" value="125,35"/>
<property name="PaddingSize" value="18,0"/>
<property name="InstanceName" value="descriptionButton"/>
<property name="PropertyOrder" value=",horizontalTextPosition,font,text,"/>
<property name="Bean Permissions" value="247"/>
<property name="Panel" value="JPanel2"/>
<property name="ClassName" value="javax.swing.JButton"/>
<property name="horizontalTextPosition" value="4"/>
<property name="text" value="Description"/>
<property name="Modifiers" value=""/>
</bean>
<bean>
<property name="Initializer" value="new javax.swing.JButton();"/>
<property name="PopupMenu" value="none"/>
<property name="ExtraCode" value="fetchButton.setVisible(false);"/>
<property name="font" value="Dialog+1+12"/>
<property name="Layout Constraints" value="3"/>
<property name="DefaultSize" value="113,35"/>
<property name="InstanceName" value="fetchButton"/>
<property name="PropertyOrder" value=",horizontalTextPosition,font,text,"/>
<property name="Bean Permissions" value="247"/>
<property name="Panel" value="JPanel2"/>
<property name="ClassName" value="javax.swing.JButton"/>
<property name="horizontalTextPosition" value="4"/>
<property name="text" value="Fetch Result"/>
<property name="Modifiers" value=""/>
</bean>
<bean>
<property name="Initializer" value="new javax.swing.JButton();"/>
<property name="ExtraCode" value=""/>
<property name="font" value="Dialog+1+12"/>
<property name="Layout Constraints" value="4"/>
<property name="DefaultSize" value="75,35"/>
<property name="InstanceName" value="closeButton"/>
<property name="PropertyOrder" value=",horizontalTextPosition,text,font,"/>
<property name="Bean Permissions" value="247"/>
<property name="Panel" value="JPanel2"/>
<property name="ClassName" value="javax.swing.JButton"/>
<property name="horizontalTextPosition" value="4"/>
<property name="text" value="Close"/>
<property name="Modifiers" value=""/>
</bean>
<bean>
<property name="Initializer" value="new javax.swing.JButton();"/>
<property name="ExtraCode" value="helpButton.setVisible(false);"/>
<property name="font" value="Dialog+1+12"/>
<property name="Layout Constraints" value="5"/>
<property name="DefaultSize" value="69,35"/>
<property name="PaddingSize" value="2,0"/>
<property name="InstanceName" value="helpButton"/>
<property name="PropertyOrder" value=",horizontalTextPosition,text,font,"/>
<property name="Bean Permissions" value="247"/>
<property name="Panel" value="JPanel2"/>
<property name="ClassName" value="javax.swing.JButton"/>
<property name="horizontalTextPosition" value="4"/>
<property name="text" value="Help"/>
<property name="Modifiers" value=""/>
</bean>
<bean>
<property name="Initializer" value="new javax.swing.JCheckBox();"/>
<property name="ExtraCode" value=""/>
<property name="font" value="Dialog+0+12"/>
<property name="Layout Constraints" value="West"/>
<property name="DefaultSize" value="190,33"/>
<property name="PaddingSize" value="21,0"/>
<property name="InstanceName" value="debugCheckbox"/>
<property name="PropertyOrder" value=",text,font,horizontalAlignment,"/>
<property name="Bean Permissions" value="247"/>
<property name="Panel" value="ButtonPanel"/>
<property name="ClassName" value="javax.swing.JCheckBox"/>
<property name="horizontalAlignment" value="2"/>
<property name="text" value="Show Debug Information"/>
<property name="Modifiers" value=""/>
</bean>
<bean>
<property name="Initializer" value="new javax.swing.JLabel();"/>
<property name="ExtraCode" value=""/>
<property name="font" value="Dialog+1+12"/>
<property name="Layout Constraints" value="East"/>
<property name="DefaultSize" value="278,38"/>
<property name="PaddingSize" value="92,13"/>
<property name="InstanceName" value="mandatoryLabel"/>
<property name="PropertyOrder" value=",font,foreground,horizontalTextPosition,horizontalAlignment,text,"/>
<property name="Bean Permissions" value="247"/>
<property name="foreground" value="-13434676"/>
<property name="Panel" value="ButtonPanel"/>
<property name="ClassName" value="javax.swing.JLabel"/>
<property name="horizontalTextPosition" value="0"/>
<property name="text" value="(*) indicates a mandatory field   "/>
<property name="horizontalAlignment" value="4"/>
<property name="Modifiers" value=""/>
</bean>
<property name="Version" value="4.3"/>
<property name="Screen Height" value="538"/>
<property name="Type" value="Panel"/>
<connection>
<property name="ConnectionType" value="0"/>
<property name="NeedsCompilation" value="false"/>
<property name="Targets" value="helpButton-TARGET"/>
<property name="Sources" value="helpButton-action-false"/>
<property name="ConnectionName" value="HelpButtonListener"/>
<property name="ConnectionClass" value="java.awt.event.ActionListener"/>
<property name="Connection_Version" value="1"/>
<property name="ListenerMethodName" value="actionPerformed"/>
<property name="SrcString" value=" new java.awt.event.ActionListener()&#10;  {&#10;&#10;     //&lt;TOP_PART&gt;  - Please do not remove this comment or write any custom code above this&#10;&#10;     //Listener Interface Methods Are Added Below &#10;&#10;&#10;     public void actionPerformed( java.awt.event.ActionEvent arg0)&#10;     {&#10;  helpAction();&#10;     }&#10;}"/>
</connection>
<connection>
<property name="ConnectionType" value="0"/>
<property name="NeedsCompilation" value="false"/>
<property name="Targets" value="closeButton-TARGET"/>
<property name="Sources" value="closeButton-action-false"/>
<property name="ConnectionName" value="CloseButtonListener"/>
<property name="ConnectionClass" value="java.awt.event.ActionListener"/>
<property name="Connection_Version" value="1"/>
<property name="ListenerMethodName" value="actionPerformed"/>
<property name="SrcString" value=" new java.awt.event.ActionListener()&#10;  {&#10;&#10;     //&lt;TOP_PART&gt;  - Please do not remove this comment or write any custom code above this&#10;&#10;     //Listener Interface Methods Are Added Below &#10;&#10;&#10;     public void actionPerformed( java.awt.event.ActionEvent arg0)&#10;     {&#10;  confirmAndClose();&#10;     }&#10;}"/>
</connection>
<connection>
<property name="ConnectionType" value="1"/>
<property name="NeedsCompilation" value="false"/>
<property name="Targets" value="nextButton-TARGET"/>
<property name="Sources" value="nextButton-action-false"/>
<property name="ConnectionName" value="NextButtonListener"/>
<property name="ConnectionClass" value="java.awt.event.ActionListener"/>
<property name="Connection_Version" value="1"/>
<property name="ListenerMethodName" value="actionPerformed"/>
<property name="SrcString" value="&#10; class NextButtonListener implements java.awt.event.ActionListener, java.io.Serializable &#10;  {&#10;&#10;     //&lt;TOP_PART&gt;  - Please do not remove this comment or write any custom code above this&#10;&#10;     //Listener Interface Methods Are Added Below &#10;&#10;&#10;     public void actionPerformed( java.awt.event.ActionEvent arg0)&#10;     {&#10;  switch(whichPanelShowing)&#10;  {&#10;   &#10;   case RADIOBUTTON_PANEL_SHOWING:&#10;                  Properties initialProps = getInitialFormProperties(bg.getSelection().getActionCommand());&#10;     if (initialProps.size()==0)&#10;    { &#10;       uiHandler.getPanelForProperties(initialProps);&#10;       whichPanelShowing = TEMPLATE_PARAMS_PANEL_SHOWING;&#10;      nextButton.doClick();&#10;    }&#10;    else&#10;    {&#10;     constructInitialFormPanel(bg.getSelection().getActionCommand() , initialProps );&#10;    }  &#10;                  break;&#10;   case TEMPLATE_PARAMS_PANEL_SHOWING:&#10;   &#10;    Properties props1 = uiHandler.getPropertiesValue();&#10;    boolean canBeSubmitted = true;&#10;    if (props1.size()&gt;0)&#10;    {&#10;     for(Enumeration enum = props1.propertyNames();enum.hasMoreElements();)&#10;     {&#10;      if(props1.getProperty((String)(enum.nextElement())).equals(&quot;&quot;))&#10;      {&#10;       canBeSubmitted = false;&#10;      }&#10;     }&#10;    }&#10;    if (canBeSubmitted)&#10;                 {&#10;                    jtp.removeChangeListener(TemplateUIPanel.this);&#10;                    jtp.removeAll();&#10;      FormsPanel.removeAll();&#10;                    try&#10;       {&#10;      numberOfRequiredFields = 0;&#10;      statusTextArea.setText(resourceBundle.getString(&quot;Template loaded successfully&quot;));&#10;      loadTemplateParams(templateName,props1);&#10;      appletApplicationCommon();&#10;     }&#10;     catch(Exception eee){eee.printStackTrace();}  &#10;    }&#10;    else&#10;    {&#10;     showMessageInDialog(resourceBundle.getString(&quot;Values cannot be null&quot;),resourceBundle.getString(&quot;Provisioning&quot;),JOptionPane.INFORMATION_MESSAGE);&#10;    }&#10;    break;&#10;   &#10;   case FORMS_PANEL_SHOWING:&#10;    if (uiHandler.areInputValuesValid())&#10;    {&#10;     try&#10;     {&#10;      Properties props = uiHandler.getUserInputValues();&#10;    String id = applyUserConfiguration(props);&#10; BaseElement be=ProvClientUtils.getBaseElement(id);&#10; if (be instanceof TemplateResult)&#10; {&#10;  showResultPanel(be.getAttribute(&quot;status&quot;),be.toString());&#10; }&#10; else if (be instanceof Template)&#10; {&#10;  setTemplate((Template)be);&#10;  appletApplicationCommon();&#10; }&#10; else if(getTopLevelAncestor() instanceof test.provisioning.TemplateNmsFrame)&#10; {&#10;   JOptionPane.showMessageDialog(TemplateUIPanel.this,resourceBundle.getString(&quot;Provisioning operation is scheduled&quot;),resourceBundle.getString(&quot;Provisioning&quot;),JOptionPane.PLAIN_MESSAGE);&#10; closeAction();&#10; }&#10;/*     else if ((apiHandler.getStatus(id).equals(&quot;NOTSTARTED&quot;))&amp;&amp;&#10;                    (template.hasAttribute(&quot;when&quot;))&amp;&amp;&#10;                    (template.getAttribute(&quot;when&quot;).trim().length()!=0))*/&#10;     else&#10; {&#10; fetchButton.setVisible(true);&#10; fetchButton.setActionCommand(id);&#10; debugCheckbox.setVisible(false);&#10; mandatoryLabel.setVisible(false);&#10; backButton.setVisible(false);&#10; closeButton.setVisible(false);&#10; nextButton.setVisible(false);&#10; helpButton.setVisible(false);&#10;statusTextArea.setText(resourceBundle.getString(&quot;Provisioning operation is scheduled&quot;)+&quot; &quot;+resourceBundle.getString(&quot;at&quot;)+&quot; &quot;+template.getAttribute(&quot;when&quot;).trim()+&quot;.\n&quot;+resourceBundle.getString(&quot;Click&quot;)+&quot; \&quot;&quot;+resourceBundle.getString(&quot;Fetch Result&quot;)+&quot;\&quot; &quot;+resourceBundle.getString(&quot;button, after scheduled time to get result&quot;));    &#10;     }/*&#10;     else&#10;     {&#10;      disableAllComponentsInButtonPanel();&#10;      Worker w=new Worker(TemplateUIPanel.this,id);&#10;          workerThread = new Thread(w);&#10;          workerThread.start(); &#10;     }*/&#10;     }&#10;     catch(Exception ex)&#10;     {&#10;      statusTextArea.setText(ex.getMessage());&#10;      //ex.printStackTrace();&#10; System.err.println(resourceBundle.getString(&quot;Error occured while configuring&quot;));&#10;      if (ex.getMessage()!=null)&#10;      {&#10;                  if (ex.getMessage().trim().length()&gt;50)&#10;  {&#10;   JFrame parentF=null;&#10;   if (TemplateUIPanel.this.getTopLevelAncestor() instanceof JFrame)&#10;   {&#10;    parentF=(JFrame)TemplateUIPanel.this.getTopLevelAncestor();&#10;   }&#10;   test.provisioning.MessageWindow.showMessage(parentF,resourceBundle.getString(&quot;Provisioning&quot;),ex.getMessage());&#10;  }&#10;  else&#10;  {&#10;      JOptionPane.showMessageDialog(TemplateUIPanel.this,ex.getMessage(),resourceBundle.getString(&quot;Provisioning&quot;),JOptionPane.ERROR_MESSAGE);&#10;  }&#10;       }&#10;     if(radioButtonPanelMadeVisible)&#10;     {&#10;      backButton.doClick();&#10;     }&#10;     else&#10;     {&#10;      closeAction();&#10;     }&#10;     }&#10;    }&#10;               /* If forms are displayed as tree, then the tree node corresponding to the panel&#10;                that contains the incomplete form should be selected. */&#10;               else&#10;               {&#10;                    if(treeNeeded)&#10;                    {&#10;                         JPanel incompletePanel = uiHandler.getIncompletePanel();&#10;                         Enumeration e = nodesAndPanelsTable.keys();&#10;                         while(e.hasMoreElements())&#10;                         {&#10;                              DefaultMutableTreeNode nodeToBeSelected = (DefaultMutableTreeNode)e.nextElement();&#10;                              JPanel jp = (JPanel) nodesAndPanelsTable.get(nodeToBeSelected);&#10;                              if(incompletePanel == jp)&#10;                              {&#10;                                   TreeNode[] nodeArray = nodeToBeSelected.getFirstLeaf().getPath();&#10;                                   if(nodeArray != null)&#10;                                   {&#10;                                        TreePath path = new TreePath(nodeArray);&#10;                                        tree.setSelectionPath(path);&#10;                                   }&#10;                                   break;&#10;                              }&#10;                         }&#10;                    }&#10;                    String errorMessage = uiHandler.getErrorMessage();&#10;                    showMessageInDialog(errorMessage,resourceBundle.getString(&quot;Provisioning&quot;),JOptionPane.INFORMATION_MESSAGE);&#10;               }&#10;               break;&#10;   case RESULT_PANEL_SHOWING:&#10;    if (ProvisioningResult1 != null)&#10;    {&#10;     ProvisioningResult1.tableRowSelectedEvent();&#10;    }&#10;    break;&#10;  }&#10;     }&#10;}"/>
</connection>
<connection>
<property name="ConnectionType" value="1"/>
<property name="NeedsCompilation" value="false"/>
<property name="Targets" value="fetchButton-TARGET"/>
<property name="Sources" value="fetchButton-action-false"/>
<property name="ConnectionName" value="FetchButtonListener"/>
<property name="ConnectionClass" value="java.awt.event.ActionListener"/>
<property name="Connection_Version" value="1"/>
<property name="ListenerMethodName" value="actionPerformed"/>
<property name="SrcString" value="&#10; class FetchButtonListener implements java.awt.event.ActionListener, java.io.Serializable &#10;  {&#10;&#10;     //&lt;TOP_PART&gt; - Please do not remove this comment or write any custom code above this&#10;&#10;     //Listener Interface Methods Are Added Below &#10;&#10;&#10;     public void actionPerformed( java.awt.event.ActionEvent arg0)&#10;     {&#10;  try&#10;  {&#10;    String id=fetchButton.getActionCommand();&#10;                String status=apiHandler.getStatus(id);&#10;  OperationStatus opStat=new OperationStatus(status);&#10;  status=opStat.getAttribute(&quot;status&quot;); &#10;                if (status.equals(ProvisioningConstants.NOTSTARTED))&#10;                {&#10;      JOptionPane.showMessageDialog(TemplateUIPanel.this,resourceBundle.getString( &quot;Provisioning operation is scheduled&quot;)+&quot;.\n&quot;+resourceBundle.getString(&quot;Try again after scheduled time&quot;),resourceBundle.getString(&quot;Provisioning&quot;),JOptionPane.INFORMATION_MESSAGE);&#10;                }&#10;                else if (status.equals(ProvisioningConstants.INPROGRESS))&#10;                {&#10;                    JOptionPane.showMessageDialog(TemplateUIPanel.this,resourceBundle.getString( &quot;Provisioning operationis in progress&quot;)+&quot;.\n&quot;+resourceBundle.getString(&quot;Try after sometime&quot;),resourceBundle.getString(&quot;Provisioning&quot;), JOptionPane.INFORMATION_MESSAGE);&#10; }&#10;                else if (status.equals(ProvisioningConstants.FINISHED))&#10;                {&#10;                    fetchButton.setVisible(false);&#10;                    closeButton.setVisible(true);&#10;                    nextButton.setVisible(true);    &#10;                    showResultPanel(status,apiHandler.getResultStatus(id));&#10;                }&#10;     else if (status.equals(ProvisioningConstants.FINISHED_RESCHEDULED))&#10;     {&#10;                    fetchButton.setVisible(true);&#10;                    closeButton.setVisible(false);&#10;                    nextButton.setVisible(false);    &#10;                    showResultPanel(status,apiHandler.getResultStatus(id));&#10;     }&#10;  }&#10; catch(Exception ex)&#10;            {&#10;                statusTextArea.setText(ex.getMessage());&#10;                System.err.println(resourceBundle.getString(&quot;Error in getting provisioning result&quot;)+&quot; : &quot; + ex.getMessage());&#10;                //ex.printStackTrace();&#10;            }&#10;     }&#10;}"/>
</connection>
<connection>
<property name="ConnectionType" value="1"/>
<property name="NeedsCompilation" value="false"/>
<property name="Targets" value="backButton-TARGET"/>
<property name="Sources" value="backButton-action-false"/>
<property name="ConnectionName" value="BackButtonListener"/>
<property name="ConnectionClass" value="java.awt.event.ActionListener"/>
<property name="Connection_Version" value="1"/>
<property name="ListenerMethodName" value="actionPerformed"/>
<property name="SrcString" value="&#10; class BackButtonListener implements java.awt.event.ActionListener, java.io.Serializable &#10;  {&#10;&#10;     //&lt;TOP_PART&gt;  - Please do not remove this comment or write any custom code above this&#10;&#10;     //Listener Interface Methods Are Added Below &#10;&#10;&#10;     public void actionPerformed( java.awt.event.ActionEvent arg0)&#10;     {&#10;  switch(whichPanelShowing)&#10;  {&#10;   case RADIOBUTTON_PANEL_SHOWING:&#10;                   break;&#10;   case TEMPLATE_PARAMS_PANEL_SHOWING:&#10;     int selectedIndex = 0; &#10;     while ((selectedIndex&lt;radioButtons.length)&amp;&amp;(!(radioButtons[selectedIndex].isSelected()))) selectedIndex++;&#10;     String selectedString =bg.getSelection().getActionCommand();&#10;     showZerothPanel();&#10;     if (bg.getButtonCount()&gt;0)&#10;     {&#10;      if ((bg.getButtonCount()&gt;selectedIndex)&amp;&amp;(radioButtons[selectedIndex].getActionCommand().equals(selectedString)))&#10;      {&#10;       radioButtons[selectedIndex].setSelected(true);&#10;      }&#10;     }&#10;                                 break;&#10;   &#10;   case FORMS_PANEL_SHOWING:&#10;     if (getInitialFormProperties(bg.getSelection().getActionCommand()).size()==0)&#10;     {&#10;                                 whichPanelShowing = TEMPLATE_PARAMS_PANEL_SHOWING;&#10;      disposeDescriptionDialog();&#10;          backButton.doClick();&#10;     }&#10;     else&#10;     {&#10;       statusTextArea.setText(resourceBundle.getString(&quot;Template parameters loaded successfully&quot;));&#10;                     debugCheckbox.setVisible(false);&#10;        mandatoryLabel.setVisible(false);&#10;       descriptionButton.setVisible(false);&#10;        if(dialog != null)&#10;       {&#10; if(dialog.isVisible())  dialog.dispose();&#10;       }&#10;        backButton.setVisible(true);&#10;        nextButton.setVisible(true);&#10;        backButton.setText(resourceBundle.getString(&quot;Back&quot;));&#10;        nextButton.setText(resourceBundle.getString(&quot;Next&quot;));&#10;        helpButton.setVisible(false);&#10;                       whichPanelShowing = TEMPLATE_PARAMS_PANEL_SHOWING;    &#10;       ((CardLayout)CenterPanel.getLayout()).show(CenterPanel,&quot;TemplateParamsPanel&quot;);&#10;     } &#10;                              break;&#10;   &#10;   case RESULT_PANEL_SHOWING:&#10;      showZerothPanel();&#10;                                               break;&#10;  }&#10;&#10;&#10;&#10;     }&#10;}"/>
</connection>
<connection>
<property name="ConnectionType" value="1"/>
<property name="NeedsCompilation" value="false"/>
<property name="Targets" value="descriptionButton-TARGET"/>
<property name="Sources" value="descriptionButton-action-false"/>
<property name="ConnectionName" value="DescriptionButtonListener"/>
<property name="ConnectionClass" value="java.awt.event.ActionListener"/>
<property name="Connection_Version" value="1"/>
<property name="ListenerMethodName" value="actionPerformed"/>
<property name="SrcString" value="&#10; class DescriptionButtonListener implements java.awt.event.ActionListener, java.io.Serializable &#10;  {&#10;&#10;     //&lt;TOP_PART&gt; - Please do not remove this comment or write any custom code above this&#10;&#10;     //Listener Interface Methods Are Added Below &#10;&#10;&#10;     public void actionPerformed( java.awt.event.ActionEvent arg0)&#10;     {&#10;  showDescriptionDialog();&#10;     }&#10;}"/>
</connection>
<property name="MenuBarPresent" value="false"/>
<property name="GenSource" value="false"/>
<property name="ToolBarPresent" value="true"/>
<property name="HorizontalSplitPanePos" value="170.0"/>
<property name="SubVersion" value="BeanBuilder_2.0"/>
<property name="LookAndFeel" value="None"/>
</screen>
