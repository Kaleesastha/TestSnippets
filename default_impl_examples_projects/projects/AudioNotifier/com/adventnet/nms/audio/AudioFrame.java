//$Id: AudioFrame.java,v 1.7 2008/10/23 04:58:55 aravinds Exp $

/*
 * AudioFrame.java
 *
 * Created on April 27, 2007, 12:10 PM
 */

package com.adventnet.nms.audio;

import java.awt.Frame;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.io.InputStream;
import java.net.URL;
import java.text.MessageFormat;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Properties;
import java.util.Vector;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.AbstractAction;
import javax.swing.ImageIcon;
import javax.swing.JApplet;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

import com.adventnet.nms.alertui.AudioNotifier;
import com.adventnet.nms.severity.SeverityInfo;
import com.adventnet.nms.util.NmsClientUtil;
import com.adventnet.nms.util.XMLDataReader;
import com.adventnet.nms.util.XMLNode;
import com.adventnet.snmp.ui.SasFileDialog;

/**
 *
 * @author  aravinds
 */
public class AudioFrame extends javax.swing.JFrame implements com.adventnet.nms.startclient.NmsFrame,javax.sound.sampled.LineListener
{
    
    /**
     * Creates new form AudioFrame
     */
    public AudioFrame()
    {
    	if(audioFrame != null)
	    {
		    dispose = true;
	    }
	    else
	    {
		    audioFrame = this;
	    }
    }
    
    public void init(JApplet applet)
    {
    	if(dispose)
	    {
		    return;
	    }
	this.applet = applet;
	count = NmsClientUtil.severityInfo.getSeverityCount(SeverityInfo.EXCLUDE_NO_CRITICALITY);
    sevList = NmsClientUtil.severityInfo.getNames(SeverityInfo.EXCLUDE_NO_CRITICALITY);
    	
	initComponents();
	setupComponents();
	
        if((NmsClientUtil.getFrameIcon())!= null)
	    this.setIconImage(NmsClientUtil.getFrameIcon());
        
	NmsClientUtil.centerWindow(this);

    }

    public void setVisible(boolean flag)
    {
    	if(dispose && flag)
	    {
		    super.setVisible(false);
		    dispose();
		    System.gc();

		    if (audioFrame.getState() == Frame.ICONIFIED)
		    {
			    audioFrame.setState(Frame.NORMAL);
		    }
		    audioFrame.toFront();
		    audioFrame.setVisible(true);
		    audioFrame.requestFocus();
		    return;
	    }
    	
        if( status != null )
        {
            if(status.equals("corrupt") && flag) //No I18N
            {
                showError(NmsClientUtil.GetString("javaui.audioui.cannotReadFile"));
                this.dispose();
                
            }
            else
            {
                super.setVisible(flag);
                if(status.equals("error") && flag) //No I18N
                {
                    showError(NmsClientUtil.GetString("javaui.audioui.invalidPropertyFile"));
                    status = new String("normal"); //No I18N
                }
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        java.awt.GridBagConstraints gridBagConstraints;

        mainPanel = new javax.swing.JPanel();
        detailsPanel = new javax.swing.JPanel();
        playbackPanel = new javax.swing.JPanel();
        durationLabel = new javax.swing.JLabel();
        duration = new javax.swing.JTextField();
        unitsLabel = new javax.swing.JLabel();
        sep = new javax.swing.JSeparator();
        dummyPanel1 = new javax.swing.JPanel();
        buttonPanel = new javax.swing.JPanel();
        applyButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        dummyPanel2 = new javax.swing.JPanel();
        enablePanel = new javax.swing.JPanel();
        enable = new javax.swing.JCheckBox();
        enableLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(NmsClientUtil.GetString("javaui.audioui.title"));
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        mainPanel.setLayout(new java.awt.GridBagLayout());

        shortCutKeyInit();
        detailsPanel.setLayout(new java.awt.GridBagLayout());

        detailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, NmsClientUtil.GetString("javaui.audioui.alarmAssociation"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, NmsClientUtil.getFont("DIALOG")));
        initDetailsPanel();
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 7, 2, 7);
        mainPanel.add(detailsPanel, gridBagConstraints);

        playbackPanel.setLayout(new java.awt.GridLayout(1, 0, 5, 5));

        durationLabel.setFont(NmsClientUtil.getFont("DIALOG"));
        durationLabel.setText(NmsClientUtil.GetString("javaui.audioui.playbackTime"));
        playbackPanel.add(durationLabel);

        duration.setDocument(new NumericDocument());
        duration.setFont(NmsClientUtil.getFont("DIALOG"));
        duration.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        playbackPanel.add(duration);

        unitsLabel.setFont(NmsClientUtil.getFont("DIALOG"));
        unitsLabel.setText(NmsClientUtil.GetString("javaui.audioui.playbackUnits"));
        playbackPanel.add(unitsLabel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mainPanel.add(playbackPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        mainPanel.add(sep, gridBagConstraints);

        dummyPanel1.setLayout(null);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainPanel.add(dummyPanel1, gridBagConstraints);

        buttonPanel.setLayout(new java.awt.GridLayout(1, 0, 5, 0));

        applyButton.setFont(NmsClientUtil.getFont("DIALOG"));
        applyButton.setText(NmsClientUtil.GetString("javaui.audioui.apply"));
        applyButton.setPreferredSize(new java.awt.Dimension(0, 0));
        applyButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                applyButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(applyButton);

        cancelButton.setFont(NmsClientUtil.getFont("DIALOG"));
        cancelButton.setText(NmsClientUtil.GetString("javaui.audioui.cancel"));
        cancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(cancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 2, 8, 10);
        mainPanel.add(buttonPanel, gridBagConstraints);

        dummyPanel2.setLayout(null);

        dummyPanel2.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainPanel.add(dummyPanel2, gridBagConstraints);

        enable.setFont(NmsClientUtil.getFont("DIALOG"));
        enable.setBorder(null);
        enable.setMargin(new java.awt.Insets(0, 0, 0, 0));
        enable.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                enableItemStateChanged(evt);
            }
        });

        enablePanel.add(enable);

        enableLabel.setFont(NmsClientUtil.getFont("DIALOG"));
        enableLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        enableLabel.setText(NmsClientUtil.GetString("javaui.audioui.enableAudio"));
        enableLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        enablePanel.add(enableLabel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 10);
        mainPanel.add(enablePanel, gridBagConstraints);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
    {//GEN-HEADEREND:event_cancelButtonActionPerformed
        exitFrame();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_applyButtonActionPerformed
    {//GEN-HEADEREND:event_applyButtonActionPerformed
        
        if(!validated())
        {
            return;
        }
        if(!propChanged())
        {
            showError(NmsClientUtil.GetString("javaui.audioui.sameProp"));
	    return;            
        }
      
        AudioNotifier.getInstance().saveProperties(changedProp,true);
        exitFrame();
        
    }//GEN-LAST:event_applyButtonActionPerformed

    private void enableItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_enableItemStateChanged
    {//GEN-HEADEREND:event_enableItemStateChanged
        int state = evt.getStateChange();
        boolean flag = false;
	if(state == ItemEvent.SELECTED)
	{	
            flag = true;
	}
	changeState(flag);
    }//GEN-LAST:event_enableItemStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        exitFrame();
    }//GEN-LAST:event_formWindowClosing
    
    private void shortCutKeyInit()
    {
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),"escape");
        getRootPane().getActionMap().put("escape", new AbstractAction()
                {
                    public void actionPerformed(ActionEvent ae)
                    {
                        shortCutKeyPressed("escape");                
                    }
                });
               
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),"enter");
        getRootPane().getActionMap().put("enter", new AbstractAction()
                {
                    public void actionPerformed(ActionEvent ae)
                    {
                        shortCutKeyPressed("enter");                
                    }
                });
    }
    
    private void shortCutKeyPressed(String key)
    {
            
        if(propChanged())
        {
            if(key.equalsIgnoreCase("escape"))
            {
                int n = JOptionPane.showConfirmDialog(this,NmsClientUtil.GetString("javaui.audioui.propsToSave"),NmsClientUtil.GetString ("javaui.audioui.confirmDialog"),JOptionPane.YES_NO_OPTION);
                if(n == JOptionPane.NO_OPTION)
                {
                    exitFrame();
                    return;
                }
            }
            if(!validated())
            {
                return;
            }
            AudioNotifier.getInstance().saveProperties(changedProp,true);
        }
        exitFrame();
    }
    
    private boolean validated()
    {
        int val;
        try
        {
            val = Integer.parseInt(duration.getText());
        }
        catch(Exception ex)
        {
            NmsClientUtil.showError(this,NmsClientUtil.GetString("javaui.audioui.integerError"));
            return false;
        }
        if(val < 1)
        {
            NmsClientUtil.showError(this,NmsClientUtil.GetString("javaui.audioui.playbackTimerError"));
            return false;
        }
        
        String name = null;
        String audioFile = null;
        
        for(int i=0;i<count;i++)
    	{
    	    name = sevLabel[i].getText();
    	    audioFile = location[i].getText();
    	    if(checkBox[i].isSelected() && (audioFile == null || (audioFile.trim()).equals("")))
    	    {
    	    	if(enable.isSelected())
    	    	{
    	    		NmsClientUtil.showError(this,NmsClientUtil.GetString("javaui.audioui.noFileAssociated")+name);//No I18N
    	    		return false;
    	    	}
    	    }
    	}
    	    
        return true;
    }
    
    private boolean propChanged()
    {
        String name = "enableAudio"; //No I18N
	String value = "false"; // No I18N
	String defAudio;
	changedProp = new Hashtable ();
	
	if(enable.isSelected())
	{
	    value = "true"; //No I18N
	}
	
	changedProp.put(name,value);
		
	name = "playbackTime"; //No I18N
	value = duration.getText(); 
	
	changedProp.put(name,value);
        
        name = "defaultAudio"; //No I18N
        defAudio = (String) audioProp.get(name);
        if(defAudio == null)
        {
            defAudio = "";
        }
        
        changedProp.put(name,defAudio);

        boolean noEntry = false;    
	for(int i=0;i<count;i++)
	{
	    name = sevLabel[i].getText();
            Properties sevProperty = new Properties();
	                            
	    if(checkBox[i].isSelected())
	    {
		value = "true"; //No I18N
	    }
	    else
	    {
                value = "false"; //No I18N
            }
	    
	    String audioFile = location[i].getText();
	    sevProperty.setProperty("enabled",value); //No I18N    
	    sevProperty.setProperty("audioFile",audioFile); //No I18N    
            changedProp.put(name,sevProperty);
	}

	   boolean changed = false;
                
        for(Enumeration enumer = changedProp.keys(); enumer.hasMoreElements() && !changed ; )
        {
            name = (String) enumer.nextElement();
            if(! sevList.contains(name))
            {
                value = (String) changedProp.get(name);
                if(!value.equals((String) audioProp.get(name)))
                {
                    changed = true;
                    break;
                }
            }
            else
            {
                Properties sevProp = (Properties) changedProp.get(name);
                Properties oldSevProp = (Properties) audioProp.get(name);
                for(Enumeration ent = sevProp.keys();ent.hasMoreElements();)
                {
                    if(oldSevProp == null)
                    {
                        changed = true;
                        break;
                    }
                    String key = (String) ent.nextElement();
                    value = sevProp.getProperty(key);
                    if(!value.equals((String) oldSevProp.get(key)))
                    {
                        changed = true;
                        break;
                    }
                }
            }
        }
        return changed;
    }
    
    private void checkBoxStateChanged(ItemEvent evt)
    {
        int state = evt.getStateChange();
	String command = ((JCheckBox)evt.getItem()).getActionCommand();
	int num = Integer.parseInt(command);
	if(state == ItemEvent.SELECTED)
	{
	    changeState(num,true,true);
	}
	else
	{
	    changeState(num,false,true);
	}
        
    }
    
    //to change state of all components
    private void changeState(boolean flag)
    {
        for(int i = 0; i<count;i++)
	{
	    changeState(i,flag,false);
	}
	durationLabel.setEnabled(flag);
	duration.setEnabled(flag);
	unitsLabel.setEnabled(flag);
    }
    
    //to change state of components in detailsPanel
    private void changeState(int i,boolean flag,boolean fromCheckBox)
    {
	if(!fromCheckBox)
	{
	    checkBox[i].setEnabled(flag);
	}    
	
	if(checkBox[i].isSelected() || !flag)
	{
	    sevLabel[i].setEnabled(flag);
	    location[i].setEnabled(flag);
	    browseButton[i].setEnabled(flag);
	    testButton[i].setEnabled(flag);
	}
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new AudioFrame().setVisible(true);
            }
        });
    }
    
    private void initDetailsPanel()
    {
        
        checkBox = new JCheckBox[count];
	sevLabel = new JLabel[count];
	location = new JTextField[count];
	browseButton = new JButton[count];
	testButton = new JButton[count];
        dummyPanel = new JPanel[count];
        
        
        GridBagConstraints constraints;
        
        for(int i=0;i<count;i++)
	{
	                
            checkBox[i] = new JCheckBox();
	    checkBox[i].setSelected(true);
	    checkBox[i].setActionCommand(String.valueOf(i));
	    checkBox[i].addItemListener(new ItemListener(){
		    public void itemStateChanged(ItemEvent evt)
	    	    {
			checkBoxStateChanged(evt);
		    }
	        });

            constraints = new GridBagConstraints();
            constraints.gridwidth = 1;
            constraints.gridheight = 1;
            constraints.anchor = GridBagConstraints.CENTER;
            constraints.gridx = 0;
            constraints.gridy = i;
            constraints.insets = new Insets(5,5,2,5);
            detailsPanel.add(checkBox[i], constraints);
	
	    sevLabel[i] = new JLabel();
    	    sevLabel[i].setFont(NmsClientUtil.getFont("DIALOG")); // No I18N
	    String sev = (String) sevList.elementAt(i);
	    
	    sevLabel[i].setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
	    sevLabel[i].setText(sev);

	    constraints = new GridBagConstraints();
            constraints.gridwidth = 1;
            constraints.gridheight = 1;
            constraints.anchor = GridBagConstraints.WEST;
            constraints.gridx = 1;
            constraints.gridy = i;
            constraints.ipadx = 10;
            constraints.insets = new Insets(5,5,2,5);
            detailsPanel.add(sevLabel[i], constraints);

	    location[i] = new JTextField(20);
	    location[i].setFont(NmsClientUtil.getFont("DIALOG")); // No I18N
	    
	    constraints = new GridBagConstraints();
            constraints.gridwidth = 1;
            constraints.gridheight = 1;
            constraints.anchor = GridBagConstraints.CENTER;
            constraints.fill = GridBagConstraints.HORIZONTAL;
            constraints.gridx = 2;
            constraints.gridy = i;
            constraints.weightx = 1;
            constraints.insets = new Insets(5,5,2,5);
	    detailsPanel.add(location[i], constraints);

	    browseButton[i] = new JButton();
	    browseButton[i].setFont(NmsClientUtil.getFont("DIALOG")); // No I18N
	    browseButton[i].setToolTipText(NmsClientUtil.GetString("javaui.audioui.selectFile"));
	    String imagePath = NmsClientUtil.applet.getDocumentBase () +"../images" ;//No I18N
	    try
	    {
		ImageIcon image = NmsClientUtil.getImageIcon(new URL(imagePath+"/browse"+NmsClientUtil.getImageType()));//No I18N
		browseButton[i].setIcon(image);
	    }
	    catch(Exception e)
	    { 
		System.err.println(NmsClientUtil.GetString("javaui.audioui.imageException"));
	    }
	    
	    browseButton[i].setBorder(new javax.swing.border.BevelBorder(0));
	    browseButton[i].setActionCommand(String.valueOf(i));
	    browseButton[i].addActionListener(new ActionListener(){
		    public void actionPerformed(ActionEvent evt)
		    {
			String command = evt.getActionCommand();
			int num = Integer.parseInt(command);
		        browse(num);
		    }
	        });
		
	    constraints = new GridBagConstraints();
            constraints.gridwidth = 1;
            constraints.gridheight = 1;
            constraints.anchor = GridBagConstraints.CENTER;
            constraints.gridx = 3;
            constraints.gridy = i;
            constraints.insets = new Insets(5,5,2,5);
            detailsPanel.add(browseButton[i], constraints);

            testButton[i] = new JButton();
	    testButton[i].setFont(NmsClientUtil.getFont("DIALOG")); // No I18N
	    testButton[i].setText(NmsClientUtil.GetString("javaui.audioui.testFile"));
	    testButton[i].setActionCommand(String.valueOf(i));
	    testButton[i].addActionListener(new ActionListener(){
		    public void actionPerformed(ActionEvent evt)
	    	    {
		    	String command = evt.getActionCommand();
			int num = Integer.parseInt(command);
			testButtonAction(num);
	    	    }
	        });

	    constraints = new GridBagConstraints();
            constraints.gridwidth = 1;
            constraints.gridheight = 1;
            constraints.anchor = GridBagConstraints.CENTER;
            constraints.gridx = 4;
            constraints.gridy = i;
            constraints.insets = new Insets(5,5,2,5);
	          
            dummyPanel[i] = new JPanel();
            dummyPanel[i].setLayout(new java.awt.GridLayout(1,0,5,0));
            dummyPanel[i].add(testButton[i]);
            constraints = new GridBagConstraints();
            constraints.gridwidth = 1;
            constraints.gridheight = 1;
            constraints.anchor = GridBagConstraints.CENTER;
            constraints.fill = GridBagConstraints.NONE;
            constraints.gridx = 4;
            constraints.gridy = i;
            constraints.insets = new Insets(5,5,2,5);
	    detailsPanel.add(dummyPanel[i], constraints);
        }
        
    }
    
    //to read details from file and set ui accordingly
    private void setupComponents()
    {
        audioProp = AudioNotifier.getInstance().getAudioProps();
        
        if(audioProp == null)
        {
            audioProp = getPropsFromFile();
            if(audioProp == null)
            {
                status = new String("corrupt"); //No I18N
                return;                
            }
        }
        boolean invalid = false;
	String value = (String) audioProp.get("enableAudio"); //No I18N
	if(value !=null) //No I18N
	{
	    if(value.equals("true"))
            {
                enable.setSelected(true);
            }
            else if(value.equals("false"))
            {
                changeState(false);
            }
            else
            {
                changeState(false);
                invalid = true;
            }
	}
	else
	{
	    changeState(false);
            invalid = true;
	}

	for(int i=0;i<count;i++)
	{
	    String sev = (String) sevList.elementAt(i);
            Properties sevProperty = (Properties) audioProp.get(sev);

            if(sevProperty == null)
            {
                changeState(i,false,true);
                checkBox[i].setSelected(false);
                invalid = true;
                continue;
            }
            
            value = sevProperty.getProperty("enabled"); //No I18N
            
            if(value != null && (value.equals("false") || value.equals("true"))) //No I18N
            {
                if(value.equals("false"))
                {
                    changeState(i,false,true);
                    checkBox[i].setSelected(false);
                }                
            }
            else
            {                
                changeState(i,false,true);
                checkBox[i].setSelected(false);
                invalid = true;
            }
                
            value = sevProperty.getProperty("audioFile"); //No I18N
            
	    if(value !=null)
	    {
		location[i].setText(value);
            }
            else
            {
                location[i].setText(""); //No I18N
                invalid = true;
            }
	    
	}

	value = (String) audioProp.get("playbackTime"); //No I18N
	if(value !=null)
	{
	    int time = 0;
            try
            {
                time = Integer.parseInt(value);
            }
            catch(NumberFormatException nfe)
            {
                duration.setText("3"); //No I18N
                invalid = true;
            }
            if(time <1)
            {
                duration.setText("3"); //No I18N
                invalid = true;
            }
            else
            {
                duration.setText(value);
            }
	}
	else
	{
	    duration.setText("3"); //No I18N
            invalid = true;
	}
        
        if(invalid)
        {
            status = new String("error"); //No I18N
        }


    }
    
    //method for browsing the required file from server
    private void browse(final int num)
    {
	final JFrame browseFrame = new JFrame();
 
        final SasFileDialog browseDialog = new SasFileDialog(applet);
        browseDialog.init();
        String direc = "/audio" ; //No I18N
	browseDialog.setDirectory(direc);

        Vector names = new Vector();
        Vector ext = new Vector();
        names.add("All files"); //No I18N
        ext.add("*.*"); //No I18N
        names.add("Wav files"); //No I18N
        ext.add("*.wav"); //No I18N
        names.add("AU files"); //No I18N
        ext.add("*.au"); //No I18N
        names.add("Midi files"); //No I18N
        ext.add("*.mid"); //No I18N
        browseDialog.setFilterItems(names,ext);
        browseDialog.addActionListener(new ActionListener(){
                public void actionPerformed(ActionEvent evt)
                {
                    if((evt.getActionCommand()).equals("Open")) //No I18N
                    {
                        String loc = browseDialog.getSelectedFileUrl();
                        if(loc !=null && !loc.equals("")) //No I18N
                        {
                            location[num].setText(loc);
                        }
                    }
                    browseFrame.dispose();
                }
            });
             
        
	browseFrame.getContentPane().add(browseDialog);
	browseFrame.setTitle(NmsClientUtil.GetString("javaui.audioui.browseTitle"));
	if((NmsClientUtil.getFrameIcon())!= null)
	{
		browseFrame.setIconImage(NmsClientUtil.getFrameIcon());
	}
	browseFrame.setSize(460,300);
	NmsClientUtil.centerWindow(browseFrame);	
	browseFrame.setVisible(true);

    }
    
    // test button action
    private void testButtonAction(int num)
    {
	if(clip != null && clip.isRunning())
	{
	    clip.stop();
	    return;
	}
	
	testButton[num].setText(NmsClientUtil.GetString("javaui.audioui.stop"));
	
	for(int i=0;i<count;i++)
	{
	    if(i != num)
	    {
		testButton[i].setEnabled(false);
	    }
	}
	boolean success = play(num);
	if(!success)
	{
	    resetTestButton();
	}
    }

    // to start playing the audio file
    private boolean play(int num)
    {
	if(location[num].getText() == null || (location[num].getText()).equals("")) //No I18N
	{
	    showError(NmsClientUtil.GetString("javaui.audioui.noFileToTest")); 
	    return false;     
	}
	
	URL url = null;
	try
	{
	    url  = new URL(NmsClientUtil.applet.getDocumentBase()+".."+location[num].getText()); //No I18N
	}
	catch(Exception exp)
	{
	    showError(NmsClientUtil.GetString("javaui.audioui.urlException"));
	    return false;
	}

	AudioInputStream stream = null;
	AudioFormat format = null;
	clip = null;

	try
	{
	    stream = AudioSystem.getAudioInputStream(url);
	    format = stream.getFormat();
	}
	catch(UnsupportedAudioFileException exp)
	{
	    showError(NmsClientUtil.GetString("javaui.audioui.unsupportedfile"));
	    return false;
	}
	catch(Exception exp)
	{
	    showError(NmsClientUtil.GetString("javaui.audioui.loadingError"));
	    return false;
	}

	DataLine.Info info = new DataLine.Info(Clip.class,format);
	if (!AudioSystem.isLineSupported(info))
	{
	    System.err.println(MessageFormat.format(NmsClientUtil.GetString("Line {0} not Supported"),new String[]{info.toString()})); //No I18N
	    return false;
	}

	try
	{
	    clip = (Clip) AudioSystem.getLine(info);
	    clip.addLineListener(this);
	    clip.open(stream);
	}
	catch(LineUnavailableException exp)
	{
	    showError(NmsClientUtil.GetString("javaui.audioui.lineUnavailable"));
	    return false;
	}
	catch(Exception exp)
	{
	    showError(NmsClientUtil.GetString("javaui.audioui.lineOpenError"));
	    return false;
	}
	clip.start();
	return true;

    }
    
    //to release the system resource when audio stops.
    public void update(LineEvent evt)
    {
	LineEvent.Type type = evt.getType();
	if(type.equals(LineEvent.Type.STOP))
	{
	    clip.close();
	    resetTestButton();
	}
    }
    
    // to change the status of the testButtons
    private void resetTestButton()
    {
	for(int i=0;i<count;i++)
	{
	    if(checkBox[i].isSelected())
	    {
		testButton[i].setEnabled(true);
	    }
	    testButton[i].setText(NmsClientUtil.GetString("javaui.audioui.testFile"));
	}
    }
    
    //method to closeFrame
    private void exitFrame()
    {
        if(clip != null && clip.isActive())
        {
            clip.stop();
        }
        audioFrame = null;
        this.setVisible(false);
        this.dispose();      
    }
    
    //method to obtain details from file
    private Hashtable getPropsFromFile()
    {
	String userDir = NmsClientUtil.applet.getDocumentBase () + "../users/" + NmsClientUtil.getUserName() + "/"; //No I18N
	XMLDataReader xmlReader = null;
        Hashtable mapping = new Hashtable();
        
	try
	{
            URL url = new URL (userDir + "AudioInfo.xml");//No I18N
            InputStream istream = url.openStream ();
            if (istream != null)
            {
		xmlReader = new XMLDataReader(istream);	
            }
            istream.close();
	}
	catch(Exception exp)
	{
            return null;
        }

	XMLNode rootNode = xmlReader.getRootNode();
	if ( rootNode  ==  null || !(rootNode.getNodeName()).equals("AUDIO_INFO")) //No I18N
	{
            return mapping;		
	}

	
	Vector children = xmlReader.getRootChildNodes();

	for (Enumeration enumer = children.elements(); enumer.hasMoreElements();)
	{
            XMLNode childNode = (XMLNode)enumer.nextElement();
            if(childNode.getNodeType() == XMLNode.ELEMENT)
            {
		Hashtable attrib = childNode.getAttributeList();
		if(attrib != null && !attrib.isEmpty())
		{
                    String key,value;
                    Properties prop = new Properties();

                    for(Enumeration ent = attrib.keys(); ent.hasMoreElements();)
                    {
			key = (String)ent.nextElement();
                    	value = (String) attrib.get(key);
			if((childNode.getNodeName()).equals("AUDIO_PROPERTIES")) //No I18N
			{
                            mapping.put(key,value);
			}
			else if ((childNode.getNodeName()).equals("AUDIO")) //No I18N
			{
                            prop.setProperty(key,value);
			}
                    }
                    if((childNode.getNodeName()).equals("AUDIO")) //No I18N
                    {
                    	key = (String) prop.remove("severity"); //No I18N
                        if(sevList.contains(key))
                        {
                            mapping.put(key,prop);
                        }
                    }
		}

            }
	}
        return mapping;

    }
    
    private void showError (String msg)
    {
        NmsClientUtil.showError(this,msg);
    }
    
    public class NumericDocument extends PlainDocument
    {
        public void insertString(int i, String s, AttributeSet attributeset)
            throws BadLocationException
        {
            if(s == null)
                return;
            char ac[] = s.toCharArray();
            boolean flag = true;
            for(int j = 0; j < ac.length; j++)
            {
                flag = Character.isDigit(ac[j]);
                boolean flag2 = Character.isWhitespace(ac[j]);
                if(flag && !flag2)
                {
                    continue;
                }
                else
                {
                    showError(NmsClientUtil.GetString("javaui.audioui.integerError"));
                    break;
                }
            }

            if(flag)
            {
                super.insertString(i, new String(ac), attributeset);
            }
        }

    }

    
    private JApplet applet;
    private Hashtable audioProp = null;
    private Hashtable changedProp = null;
    private Vector sevList = null;
    
    private int count = 0;
    private String status =  new String("normal"); //No I18N
    private Clip clip = null;
    private static AudioFrame audioFrame = null;
    private boolean dispose = false;
    
    //other required swing components
    private JCheckBox checkBox[];
    private JLabel sevLabel[];
    private JTextField location[];
    private JButton browseButton[];
    private JButton testButton[];
    private JPanel dummyPanel[];
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyButton;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel detailsPanel;
    private javax.swing.JPanel dummyPanel1;
    private javax.swing.JPanel dummyPanel2;
    private javax.swing.JTextField duration;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JCheckBox enable;
    private javax.swing.JLabel enableLabel;
    private javax.swing.JPanel enablePanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel playbackPanel;
    private javax.swing.JSeparator sep;
    private javax.swing.JLabel unitsLabel;
    // End of variables declaration//GEN-END:variables
    
}
