//$Id: ThresholdUI.java,v 1.1.4.16 2013/08/08 10:13:58 karen.r Exp $

package com.adventnet.nms.perfui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Hashtable;
import java.util.Properties;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

import com.adventnet.nms.poll.ThresholdObject;
import com.adventnet.nms.pollui.PerfUIData;
//import com.adventnet.nms.pollui.StatsAdminPanel;
import com.adventnet.nms.util.NmsClientUtil;
import com.adventnet.nms.xmlui.NmsPropertiesPanel;
/**
 *
 * @author vijayalakshmiv
 */
public class ThresholdUI extends NmsPropertiesPanel implements ActionListener{
	
	private static Hashtable thresholds = new Hashtable();
	private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private static javax.swing.JTable table;
    private static Vector threshnames = new Vector();
    private static DefaultTableModel threshmodel= new DefaultTableModel();
    public Vector permissions = new Vector();
    
    private ThresholdPropsPanel propspanel;
    private int selectedrow=0;
    private String currentthreshold="";
    private PerfUIData perfdata=PerfUIData.getInstance();
  
    /** Creates new form ThresholdUI */
    public ThresholdUI(ThresholdPropsPanel propspanel) {
        
    	
    	this.propspanel=propspanel;
    	setId("ThresholdUI");
    	permissions= perfdata.getUserPermissions();
     	initComponents();
    	fetchThresholds();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(200, 700));
        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));

        threshmodel=new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", ""
            }
        );
        table.setForeground(new java.awt.Color(0, 0, 0));
        table.setBackground(Color.WHITE);
        table.setModel(threshmodel);
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        table.setIntercellSpacing(new java.awt.Dimension(0, 0));
        table.setRowHeight(20);
        table.setCellSelectionEnabled(false);
        table.setSelectionBackground(new java.awt.Color(90,135,226));
        table.setSelectionForeground(Color.white);
        table.setShowHorizontalLines(false);
        table.setShowVerticalLines(false);
        jScrollPane1.setViewportView(table);
        jScrollPane1.getViewport().setBackground(new java.awt.Color(255,255,255));
        JTableHeader header = table.getTableHeader();
        header.setBackground(new Color(255,255,255));
        header.setPreferredSize(new Dimension(table.getColumnModel().getTotalColumnWidth(), 24));
        header.setFont(new Font(NmsClientUtil.getFont().getName(),1,NmsClientUtil.getFont().getSize()));
        for(int i=0;i<=threshmodel.getColumnCount()-1;i++)
        {
            TableColumn col=table.getColumnModel().getColumn(i);
            col.setHeaderRenderer(new HeaderRenderer());
        }
        TableColumn column0 = table.getColumnModel().getColumn(0);
        column0.setPreferredWidth(150);
        column0.setCellRenderer(new HeaderRenderer());

        
        TableColumn column =table.getColumnModel().getColumn(1);
        if(permissions != null && permissions.contains("Modify Threshold Object"))//No I18N
        {
            column.setCellEditor(new NmsTableCellEditor(new JCheckBox()));
            column.setCellRenderer(new ButtonRenderer());
        }
        column.setPreferredWidth(20);

        TableColumn column1 =table.getColumnModel().getColumn(2);
        if(permissions != null && permissions.contains("Delete Threshold Object"))//No I18N
        {
            column1.setCellEditor(new NmsTableCellEditor(new JCheckBox()));
            column1.setCellRenderer(new ButtonRenderer());
        }
        column1.setPreferredWidth(20);

        table.setCellSelectionEnabled(false);
        ListSelectionModel cellSelectionModel = table.getSelectionModel();
        cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        cellSelectionModel.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent evt)
            {
            	int selected_column=table.getSelectedColumn();
            	if(selected_column==0)
            	{
            		table.clearSelection();
            		return;
            	}
                if(!evt.getValueIsAdjusting())
                {
                    
                    propspanel.setOperation("modify");//No I18N
                    selectedrow = table.getSelectedRow();
                    if(selectedrow>=0)
                    {	
                    currentthreshold=(String)threshmodel.getValueAt(selectedrow, 0);
                    populateProperties();
                    }
                }
            }
        });

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setBackground(new java.awt.Color(223, 223, 223));
        jPanel1.setPreferredSize(new java.awt.Dimension(10, 40));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5));

        jLabel1.setFont(new Font(NmsClientUtil.getFont().getName(),1,12));
        jLabel1.setText(NmsClientUtil.GetString("javaui.perfgui.threshold.thresholdlist"));//No I18N
        jPanel1.add(jLabel1);

        jSeparator1.setForeground(new java.awt.Color(204, 204, 204));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setPreferredSize(new java.awt.Dimension(2, 40));
        jPanel1.add(jSeparator1);
        
        if(permissions.contains("Add Threshold Object"))//No I18N
        {	
        jButton1.setFont(NmsClientUtil.getFont());
        try {
			jButton1.setIcon(NmsClientUtil.getImageIcon(new URL(NmsClientUtil.applet.getDocumentBase()+"../images/add.png")));//No I18N

		} catch (MalformedURLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
        String add=NmsClientUtil.GetString("javaui.perfgui.threshold.addnew");
        jButton1.setText("<html><font color=\"blue\"> <u>"+add+"</u>  </font></html>");//No I18N
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setIconTextGap(7);
        jButton1.setActionCommand("Add");//No I18N
        jButton1.addActionListener(this);
           
         jPanel1.add(jButton1);
        }    
            add(jPanel1, java.awt.BorderLayout.PAGE_START);
        }// </editor-fold>

   
    
    public void fetchThresholds()
    {
        //if(thresholds.isEmpty())
        
           //Need to check if this has to be fetched each time
    	    perfdata.sendDataToServer(null,"Threshold properties");
    }
    
    public void setData(Properties props)
    {
    	Vector thresh=(Vector) props.get("thresholds");
    	if(thresh!=null)
       {
        threshnames.clear(); 
        SwingUtilities.invokeLater(new ThresholdUpdater(thresh));
//    for(int i=0;i<=thresh.size()-1;i++)
//    {
//            ThresholdObject to = (ThresholdObject)thresh.elementAt(i);
//	        Properties p = to.getProperties();
//		String name= (String) p.get("name");//No I18N
//            threshnames.addElement(name);//No Internationalisation//No Internationalisation
//            String[] rowData={name,"",""};
//        	threshmodel.addRow(rowData);
//        	thresholds.put(name, p);
//    }
//     table.updateUI();
       }
    }
    
    
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		buttonAction(e);
	}
    public void populateProperties()
        {
             
    		if(!thresholds.isEmpty())
    		{
    			
    			Properties props=(Properties) thresholds.get(currentthreshold);
    			String kind = (String) props.get("kind");//No I18N
    			propspanel.showTypeCard(kind);
    			//setSeverity(props);
    			propspanel.setData(props);
    			
    			String[] todisable={"name","kind"};//No I18N
    			propspanel.disableComponents(todisable);
    			
    			//Need tp disable required fields
    			
    			
    		}
    		
        }
    public void setSeverity(Properties props)
    {
    	String kind = (String) props.get("kind");//No I18N
    	DefaultComboBoxModel cmodel = new DefaultComboBoxModel();
    	JComboBox severity=null;
    	String sev=null;
    	
    	if(kind.equalsIgnoreCase("long")||kind.equalsIgnoreCase("percentage"))//No I18N
    	{
    		severity=(JComboBox) propspanel.getComponentWithProp("severity");//No I18N
    		sev= getSeverityforCombo((String) props.get("severity"));//No I18N
    		props.put("severity",sev);//No I18N
    		
    		
    	}
    	else{
    		severity=(JComboBox) propspanel.getComponentWithProp("triggerSeverity");//No I18N
    		sev= getSeverityforCombo((String) props.get("triggerSeverity"));//No I18N
    		props.put("triggerSeverity",sev);//No I18N
    	}
    	
    	severity.setSelectedItem(sev);
    	
    }
    private String  getSeverityforCombo(String sev)
    {
        
        try{
    	int severityValue = Integer.parseInt(sev);	
    	String severity=NmsClientUtil.severityInfo.getName(severityValue);
    	 return severity;
        }
        catch(NumberFormatException nfe)
        {
        	return sev;
        }
       
    }
       private void buttonAction(ActionEvent evt)
        {
        	if(evt.getActionCommand().equalsIgnoreCase("Add"))//No I18N
        	{
        		propspanel.clearAll();
                String[] toenable = {"name","kind"};//No I18N
        		propspanel.enableComponents(toenable);
        		table.clearSelection();
        		propspanel.setOperation("Add");//No I18N
        		
        	}
        	
        	
        	else if(evt.getActionCommand().equalsIgnoreCase("modify"))//No I18N
        	{
        			
                    String[] todisable = {"name","kind"};//No I18N
                    propspanel.disableComponents(todisable);
                    propspanel.setOperation("modify");//No I18N
           	}
        	else if(evt.getActionCommand().equalsIgnoreCase("delete"))//No I18N
        	{
        		
        		selectedrow=table.getSelectedRow();
        		if(selectedrow<0)
                {
                    JOptionPane.showMessageDialog(this,NmsClientUtil.GetString("javaui.perfgui.thresholddata.selection.errormessage"),NmsClientUtil.GetString("Error Message"),JOptionPane.ERROR_MESSAGE);
                    return;
                }
                 else
                 {	
                 currentthreshold=(String)threshmodel.getValueAt(selectedrow, 0);
                 populateProperties();
                 }
        		
        		
        		//String thresholdobj=(String) propspanel.polldata.get(pdname);
        		Properties props = propspanel.getData();
		String thresholdname  =	props.get("name").toString();
                int sel=JOptionPane.showConfirmDialog(this,NmsClientUtil.GetString("javaui.perfgui.thresholddata.delete.confirmation"),NmsClientUtil.GetString("Confirmation message"),JOptionPane.OK_CANCEL_OPTION);
                if(sel==JOptionPane.OK_OPTION && props!=null)
                {
                	if(thresholdname != null && thresholdname != "")
                	{                		
                	//NmsClientUtil.busyCursor(this);
                	propspanel.setOperation("Delete");
                	perfdata.sendDataToServer(props,"Delete Threshold");
                	propspanel.setOperation("Delete");
                	}
                	else
                	{
                		JOptionPane.showMessageDialog(null,NmsClientUtil.GetString("javaui.perfgui.thresholddata.delete.nullselection.error"),NmsClientUtil.GetString("javaui.perfgui.thresholddata.delete.dialogtitle.error"),JOptionPane.INFORMATION_MESSAGE);
                		return;
                	}
                	
                }
                else
                {
                    return;
                }
        	}

        }

       public void deleteThreshold(Properties props)
        {
    	   try
			{
			//String result="";
    		
			/*NmsClientUtil.busyCursor(this);
            String ex="";*/
            //if(result.equalsIgnoreCase("success"))//No I18N
               
                   Runnable run = new Runnable()
                   {

					public void run() {
						threshmodel.removeRow(selectedrow);
						table.updateUI();
						//threshmodel.fireTableRowsDeleted(selectedrow,selectedrow);
						table.clearSelection();
					}
                   };
                   SwingUtilities.invokeLater(run);
                   threshnames.removeElement(props.getProperty("name"));//No I18N
				   propspanel.clearAll();
				   String[] toenable={"name","kind"};//No I18N
				   propspanel.enableComponents(toenable);
				   propspanel.setOperation("Add");//No I18N
                   
                //}
            /*else
            {
                    StringTokenizer str = new StringTokenizer(result,",");//No I18N

                     while(str.hasMoreElements())
                     {
                      str.nextToken();
                       ex=str.nextToken();
                      JOptionPane.showMessageDialog(this,"Exception while modifying Threshold Object  "+ex,NmsClientUtil.GetString("Error Message"),JOptionPane.ERROR);//No I18N
                      }
                    return;
                 }*/
             }
             catch(Exception ex)
             {

             }
             NmsClientUtil.normalCursor(propspanel);
        }
       
       public void modifyThreshold(Properties props)
       {
    	   String name=(String)props.get("name");//No I18N
           thresholds.put(name,props);
       }
       public void addThreshold(String name,Properties props)
 	  {
// 		  String[] names={name,"",""};
// 		  threshmodel.addRow(names);
 		  thresholds.put(name,props);
 		  SwingUtilities.invokeLater(new ThresholdUpdater(name));
 		 threshnames.add(name);//Fix for improper error when adding threshold with same name
// 		  table.updateUI();
// 		  table.clearSelection();
 		  propspanel.clearAll();
 	  }
       
      public boolean checkForName(String name)
      {
    	  if(threshnames.contains(name))
    	  {
    		  return false;
    	  }
    	  
    	  return true;
      }
      
      public static Vector getThresholdNames()
	  {
		  return threshnames;
	  }


    
       public class NmsTableCellEditor extends DefaultCellEditor
{
	  protected JButton button;

	  public NmsTableCellEditor(JCheckBox cb) {
	    super(cb);

	    button = new JButton();
        button.setOpaque(true);
        button.setMargin(new java.awt.Insets(2,2,2,2));
        button.setIconTextGap(0);
        button.addActionListener(new ActionListener() {

	    	public void actionPerformed(ActionEvent e) {

                        fireEditingStopped();
                        buttonAction(e);


                }
	    });
           }

       public Component getTableCellEditorComponent(JTable table1, Object value,
	                   boolean isSelected, int row, int column) {
		   // final String val = value.toString();

		    button.setBorderPainted(false);
		    button.setContentAreaFilled(false);
		    button.setFocusPainted(false);
		    button.setEnabled(true);

                    button.setForeground(Color.BLACK);

                    if(column ==1)
                    {
                    button.setActionCommand("modify");//No I18N
                    }
                    else if(column ==2)
                    {
                        button.setActionCommand("delete");//No I18N
                    }

      return button;
	  }



	  public Object getCellEditorValue() {
		  return button.getText();
	  }

	  

}
       
       class ButtonRenderer extends JButton implements TableCellRenderer {

		public ButtonRenderer() {
	        setOpaque(true);
	}

		public Component getTableCellRendererComponent(JTable table, Object value,
	                boolean isSelected, boolean hasFocus, int row, int column) {

                  try {
                    if(column ==1)
                    {

						setIcon(NmsClientUtil.getImageIcon(new URL(NmsClientUtil.applet.getDocumentBase()+"../images/edit.png")));//No I18N


                    }
                    else if(column ==2)
                    {
                    setIcon(NmsClientUtil.getImageIcon(new URL(NmsClientUtil.applet.getDocumentBase()+"../images/remove.png")));//No I18N


                    }
                    } catch (MalformedURLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

		    setBorderPainted(false);
		    setContentAreaFilled(false);
		    setFocusPainted(false);
		    setEnabled(true);

                    setForeground(Color.BLACK);
                    //setPreferredSize(new java.awt.Dimension(2,2));
                    setMargin(new java.awt.Insets(2,2,2,2));
	        return this;
	}
	}

        class HeaderRenderer extends JLabel implements TableCellRenderer

       {

       public Component getTableCellRendererComponent(JTable table,

       Object value,

       boolean hasFocus,

       boolean isSelected,

       int row,

       int col)

       {

       setText(value.toString());

       setBorder(BorderFactory.createEmptyBorder(2,2,2,2));

       return this;

       }


       }

        class ThresholdUpdater implements Runnable
        {
        	String name;
        	Vector thresh;
        	public ThresholdUpdater(String name)
        	{
        		this.name=name;
        	}
			public ThresholdUpdater(Vector thresh)
			{
				this.thresh=thresh;
			}
			public void run() {
				// TODO Auto-generated method stub
				if(name != null && !name.equals(""))
				{	
				String[] names={name,"",""};
		 		  threshmodel.addRow(names);
		 		  table.updateUI();
		 		  table.clearSelection();
				}
				else if(thresh != null)
				{	
		 		 for(int i=0;i<=thresh.size()-1;i++)
		 	    {
		 	            ThresholdObject to = (ThresholdObject)thresh.elementAt(i);
		 		        Properties p = to.getProperties();
		 		        String kind = (String) p.get("kind");
		 		        if(kind.equalsIgnoreCase("long") || kind.equalsIgnoreCase("percentage"))
		 		        {
		 		        	String threshvalue = (String) p.get("thresholdValue");
		 		        	String rearmvalue = (String) p.get("rearmValue");
		 		        	String newthresvalue = String.valueOf(Double.valueOf(threshvalue).longValue());
		 		        	String newrearmvalue = String.valueOf(Double.valueOf(rearmvalue).longValue());
		 		        	p.put("thresholdValue",newthresvalue);
		 		        	p.put("rearmValue",newrearmvalue);
		 		        }
		 			String name= (String) p.get("name");//No I18N
		 	            threshnames.addElement(name);//No Internationalisation//No Internationalisation
		 	            String[] rowData={name,"",""};
		 	        	threshmodel.addRow(rowData);
		 	        	thresholds.put(name, p);
		 	    }
		 	     table.updateUI();
				} 
			}
        	
        }
        
        public void resetAction()
        {
        	String operation =propspanel.getOperation();
        	if(operation.equalsIgnoreCase("Add"))//No I18N
        	{
        		//propspanel.clearAll();
                String[] toenable = {"name","kind"};//No I18N
        		propspanel.enableComponents(toenable);
        		table.clearSelection();
        		propspanel.setOperation("Add");//No I18N
        		
        	}
        	
        	
        	else if(operation.equalsIgnoreCase("modify")||operation.equalsIgnoreCase("delete"))//No I18N
        	{
        		//following lines added to reset the values if changed in modify and then pressing cancel
        		int row = table.getSelectedRow();
				int col = table.getSelectedColumn();
				table.clearSelection();
				table.changeSelection(row, col, false, false);
                    String[] todisable = {"name","kind"};//No I18N
                    propspanel.disableComponents(todisable);
                    propspanel.setOperation("modify");//No I18N
           	}
        }
		
}

