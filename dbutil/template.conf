package com.adventnet.nms.store.relational; 
import java.sql.*; 
import java.util.*; 
import com.adventnet.nms.store.*; 
import com.adventnet.management.transaction.PreparedStatementWrapper;   
import PACKAGE.*; 

public class RelationalTABLENAME extends RelationalObject 
{
	static boolean initialized = false ; 
	static int psIDForGet; 
	static int psIDForAdd; 
	static int psIDForDelete; 
	static int psIDForUpdate; 
	
  public RelationalTABLENAME() 
  {
  }
  public void init(RelationalAPI relapi)  
	{ 
	  super.init(relapi);
	   if (initialized) return;  
		String prepareSqlStringForGet = GETSTATEMENT; 
		
		psIDForGet = relapi.getPreparedStatementID 
		( prepareSqlStringForGet ); 
		
		String prepareSqlStringForAdd = ADDSTATEMENT; 
		
		psIDForAdd = relapi.getPreparedStatementID 
		( prepareSqlStringForAdd ); 
		
		String prepareSqlStringForUpdate = UPDATESTATEMENT; 
		
		psIDForUpdate = relapi.getPreparedStatementID 
		( prepareSqlStringForUpdate ); 
		
		String prepareSqlStringForDelete = DELETESTATEMENT; 
		
		psIDForDelete = relapi.getPreparedStatementID 
		( prepareSqlStringForDelete ); 
		initialized=true;  
	}
	
	public boolean fillProperties(DBInterface dbObj, Properties p) 
	{ 
		TABLENAME obj = (TABLENAME)dbObj; 
		if ( (p==null) || (p.getProperty(PRIMARYKEY)==null) )
		{
			return false;
		}
		obj.SETMETHOD(p.getProperty(PRIMARYKEY));
		obj.setProperties(p); 
		return true; 
	}
	
	public Vector getStatementsForGet(String[] args) 
	{ 
		Vector v =super.getStatementsForGet(args); 
		PreparedStatementWrapper ps = relapi.fetchPreparedStatement(psIDForGet);
                PreparedStatement preparedStatementForGet = ps.getPreparedStatement();            
		if (preparedStatementForGet!=null) 
		{ 
			try 
			{ 
				preparedStatementForGet.setString(1,args[0]); 
				v.addElement(ps); 
			}
			catch (SQLException sqle) 
			{ 
				System.err.println("Exception setting prepared statement for " 
				+" TABLENAME "+args[0]+":"+sqle); 
			}
		}
		return v; 
	}
	public Vector getCustomStatements(DBInterface dbObj,String[] args) 
	{ 
	  //User to fill custom sql statements if any required
		return super.getCustomStatements(dbObj,args);
	}
	public void fillCustomProperties(DBInterface dbObj,ResultSet rs,String str) 
	{ 
		super.fillCustomProperties(dbObj,rs,str); 
	}
	public void fillCustomProperties(DBInterface dbObj,ResultSet rs,PreparedStatement prstmt) 
	{ 
		super.fillCustomProperties(dbObj,rs,prstmt); 
	}
	public void fillCustomProperties(DBInterface dbObj,ResultSet rs,int id)
        {
		super.fillCustomProperties(dbObj,rs,id); 
        }     
	public Vector getStatementsForAdd(DBInterface dbObj) 
	{ 
		TABLENAME obj = (TABLENAME)dbObj; 
		Vector v =super.getStatementsForAdd(dbObj);
		PreparedStatementWrapper ps = relapi.fetchPreparedStatement(psIDForAdd);
                PreparedStatement preparedStatementForAdd = ps.getPreparedStatement();            
		if (preparedStatementForAdd!=null) 
		{ 
			Properties p = obj.getProperties(); 
			try 
			{ 
				preparedStatementForAdd.setString 
				v.addElement(ps); 
			}
			catch (SQLException sqle) 
			{ 
				System.err.println("Exception setting preparedStatement for " 
				+ " TABLENAME :"+sqle); 
				sqle.printStackTrace(); 
			}
		}
		return v; 
	}
	public Vector getStatementsForDelete(DBInterface dbObj) 
	{ 
		TABLENAME obj = (TABLENAME)dbObj; 
		Vector v =super.getStatementsForDelete(dbObj);
		PreparedStatementWrapper ps = relapi.fetchPreparedStatement(psIDForDelete);
                PreparedStatement preparedStatementForDelete = ps.getPreparedStatement();         
		if (preparedStatementForDelete!=null) 
		{ 
			try 
			{ 
				preparedStatementForDelete.setString(1,db2str(obj.GETMETHOD())); 
				v.addElement(ps); 
			}
			catch (SQLException sqle) 
			{ 
				System.err.println("Exception setting preparedStatement for " 
				+" TABLENAME :"+sqle); 
			}
		}
		return v; 
	}
	public Vector getStatementsForUpdate(DBInterface dbObj) 
	{ 
		TABLENAME obj = (TABLENAME)dbObj; 
		Vector v =super.getStatementsForUpdate(dbObj);
		PreparedStatementWrapper ps = relapi.fetchPreparedStatement(psIDForUpdate);
                PreparedStatement preparedStatementForUpdate = ps.getPreparedStatement(); 
		if (preparedStatementForUpdate!=null) 
		{ 
			Properties p = obj.getProperties(); 
			try 
			{ 
				preparedStatementForUpdate.setString 
				v.addElement(ps); 
			}
			catch (SQLException sqle) 
			{ 
				System.err.println("Exception setting preparedStatement for " 
				+" TABLENAME :"+sqle); 
				sqle.printStackTrace(); 
			}
		}
		return v; 
	}
}
