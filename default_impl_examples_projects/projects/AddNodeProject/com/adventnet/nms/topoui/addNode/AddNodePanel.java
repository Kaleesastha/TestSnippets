//$Id: AddNodePanel.java,v 1.6.4.1 2013/08/08 10:41:14 wesley Exp $
/*
 * AddNodePanel.java
 *
 * Created on July 11, 2005, 1:53 PM
 */

package com.adventnet.nms.topoui.addNode;

import java.io.*;
import java.net.URL;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.*;
import javax.swing.JFrame;
import javax.swing.border.*;
import javax.swing.*;
import java.awt.event.*;
import java.awt.Color;
import java.awt.CardLayout;
import java.io.DataInputStream;

//AdventNet API
import com.adventnet.nms.util.*;
import com.adventnet.nms.startclient.NmsFrame;
import com.adventnet.nms.common.tl1.*;
import com.adventnet.nms.startclient.corba.CORBAClientSocketConn;

/**
 *
 * @author  karanmercy
 */
public class AddNodePanel extends JFrame implements NmsFrame, ResultEventListener,WindowListener, ActionListener, Runnable {

    /** Creates new form AddNodePanel */
    public AddNodePanel() {
        if(!open)
        {
            open = true;
            GenericSession.getInstance().register(this);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        tl1Panel = new javax.swing.JPanel();
        jPanel33 = new javax.swing.JPanel();
        tl1Host = new javax.swing.JLabel();
        tl1HostPanel = new javax.swing.JPanel();
        tl1HostTxt = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jPanel36 = new javax.swing.JPanel();
        jPanel37 = new javax.swing.JPanel();
        tl1mask1 = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        tl1mask2 = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        tl1mask3 = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        tl1mask4 = new javax.swing.JTextField();
        discUnreachableLbl = new javax.swing.JLabel();
        discUnreachableCbox = new javax.swing.JCheckBox();
        discParentNet = new javax.swing.JLabel();
        discParentnetCbox = new javax.swing.JCheckBox();
        tl1overrideLbl = new javax.swing.JLabel();
        tl1overrideCbox = new javax.swing.JCheckBox();
        tl1updateLbl = new javax.swing.JLabel();
        tl1UpdateCbox = new javax.swing.JCheckBox();
        jPanel34 = new javax.swing.JPanel();
        tl1DevGrp = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        tl1GroupCombo = new javax.swing.JComboBox();
        corbaPanel = new javax.swing.JPanel();
        corbaPage1 = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        corbaPropPanel = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        orbHost = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        orbPort = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        orbNameRef = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        orbInterface = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        orbClass = new javax.swing.JTextField();
        moPropPanel = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jPanel22 = new javax.swing.JPanel();
        moGrp = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jPanel23 = new javax.swing.JPanel();
        moType = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jPanel24 = new javax.swing.JPanel();
        moTester = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        nextBtn = new javax.swing.JButton();
        corbaPage2 = new javax.swing.JPanel();
        jPanel26 = new javax.swing.JPanel();
        statusPollPanel = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        jPanel42 = new javax.swing.JPanel();
        statusPollInterface = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        jPanel43 = new javax.swing.JPanel();
        statusPollNameRef = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        jPanel44 = new javax.swing.JPanel();
        statusPollOperation = new javax.swing.JTextField();
        dataPollPanel = new javax.swing.JPanel();
        jLabel41 = new javax.swing.JLabel();
        jPanel45 = new javax.swing.JPanel();
        dataColInterface = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        jPanel46 = new javax.swing.JPanel();
        dataColNameRef = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        backBtn = new javax.swing.JButton();
        snmpPanel = new javax.swing.JPanel();
        discConfPanel = new javax.swing.JPanel();
        nodeTypeLbl = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        ipv4 = new javax.swing.JRadioButton();
        ipv6 = new javax.swing.JRadioButton();
        nodeNameLbl = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        nodeNameTxt = new javax.swing.JTextField();
        netmaskLbl = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        netmask1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        netmask2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        netmask3 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        netmask4 = new javax.swing.JTextField();
        discoverLbl = new javax.swing.JLabel();
        discoverCbox = new javax.swing.JCheckBox();
        parentNetLbl = new javax.swing.JLabel();
        parentNetCbox = new javax.swing.JCheckBox();
        overrideLbl = new javax.swing.JLabel();
        overrideCbox = new javax.swing.JCheckBox();
        updateLbl = new javax.swing.JLabel();
        updateCbox = new javax.swing.JCheckBox();
        snmpConfPanel = new javax.swing.JPanel();
        communityLbl = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        communityTxt = new javax.swing.JTextField();
        portLbl = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        portTxt = new javax.swing.JTextField();
        v3Lbl = new javax.swing.JLabel();
        v3Cbox = new javax.swing.JCheckBox();
        usernameLbl = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        usernameTxt = new javax.swing.JTextField();
        contextnameLbl = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        contextnameTxt = new javax.swing.JTextField();
        tabPane = new javax.swing.JTabbedPane();
        bottomPanel = new javax.swing.JPanel();
        statusPanel = new javax.swing.JPanel();
        status = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        addNodeBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        processInBgCbox = new javax.swing.JCheckBox();
        topPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();

        FormListener formListener = new FormListener();

        tl1Panel.setLayout(new java.awt.BorderLayout());

        tl1Panel.setName("tl1Panel");
        jPanel33.setLayout(new java.awt.GridLayout(6, 2, 12, 0));

        jPanel33.setBorder(new javax.swing.border.TitledBorder(NmsClientUtil.GetString("javaclient.topo.addnode.panel.discconf")));
        tl1Host.setText(NmsClientUtil.GetString("javaclient.topo.addnode.hostname"));
        tl1Host.setAlignmentX(3.0F);
        tl1Host.setName("nodeLbl");
        jPanel33.add(tl1Host);

        tl1HostPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 12));

        tl1HostPanel.setName("tl1HostTxt");
        tl1HostTxt.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        tl1HostTxt.setAlignmentY(10.0F);
        tl1HostTxt.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        tl1HostTxt.setMaximumSize(new java.awt.Dimension(200, 21));
        tl1HostTxt.setMinimumSize(new java.awt.Dimension(60, 21));
        tl1HostTxt.setName("tl1HostTxt");
        tl1HostTxt.setPreferredSize(new java.awt.Dimension(150, 21));
        tl1HostPanel.add(tl1HostTxt);
        tl1HostTxt.getAccessibleContext().setAccessibleName("tl1HostTxt");

        jPanel33.add(tl1HostPanel);

        jLabel27.setText(NmsClientUtil.GetString("javaclient.topo.addnode.netmask"));
        jLabel27.setAlignmentX(3.0F);
        jPanel33.add(jLabel27);

        jPanel36.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 12));

        jPanel37.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 2, 0));

        jPanel37.setBorder(new javax.swing.border.EtchedBorder());
        jPanel37.setMaximumSize(new java.awt.Dimension(170, 33));
        jPanel37.setMinimumSize(new java.awt.Dimension(150, 30));
        jPanel37.setPreferredSize(new java.awt.Dimension(150, 30));
        tl1mask1.setText("255");
        tl1mask1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        tl1mask1.setMaximumSize(new java.awt.Dimension(30, 20));
        tl1mask1.setMinimumSize(new java.awt.Dimension(27, 20));
        tl1mask1.setName("tl1mask1");
        tl1mask1.setPreferredSize(new java.awt.Dimension(30, 20));
        tl1mask1.addKeyListener(new KeyAdapter());
        jPanel37.add(tl1mask1);

        jLabel28.setFont(NmsClientUtil.getFont("DIALOG"));
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText(".");
        jLabel28.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel37.add(jLabel28);

        tl1mask2.setText("255");
        tl1mask2.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        tl1mask2.setMaximumSize(new java.awt.Dimension(30, 21));
        tl1mask2.setMinimumSize(new java.awt.Dimension(24, 21));
        tl1mask2.setName("tl1mask2");
        tl1mask2.setPreferredSize(new java.awt.Dimension(30, 21));
        tl1mask2.addKeyListener(new KeyAdapter());
        jPanel37.add(tl1mask2);

        jLabel29.setFont(NmsClientUtil.getFont("DIALOG"));
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel29.setText(".");
        jLabel29.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel37.add(jLabel29);

        tl1mask3.setText("255");
        tl1mask3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        tl1mask3.setMaximumSize(new java.awt.Dimension(30, 21));
        tl1mask3.setMinimumSize(new java.awt.Dimension(27, 21));
        tl1mask3.setName("tl1mask3");
        tl1mask3.setPreferredSize(new java.awt.Dimension(30, 21));
        tl1mask3.addKeyListener(new KeyAdapter() );
        jPanel37.add(tl1mask3);

        jLabel30.setFont(NmsClientUtil.getFont("DIALOG"));
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setText(".");
        jLabel30.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel37.add(jLabel30);

        tl1mask4.setText("0");
        tl1mask4.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        tl1mask4.setMaximumSize(new java.awt.Dimension(30, 21));
        tl1mask4.setMinimumSize(new java.awt.Dimension(27, 21));
        tl1mask4.setName("tl1mask4");
        tl1mask4.setPreferredSize(new java.awt.Dimension(30, 21));
        tl1mask4.addKeyListener(new KeyAdapter());
        jPanel37.add(tl1mask4);

        jPanel36.add(jPanel37);

        jPanel33.add(jPanel36);

        discUnreachableLbl.setText(NmsClientUtil.GetString("javaclient.topo.addnode.disc.notreachable"));
        jPanel33.add(discUnreachableLbl);

        discUnreachableCbox.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        discUnreachableCbox.setName("discUnreachableCbox");
        jPanel33.add(discUnreachableCbox);

        discParentNet.setText(NmsClientUtil.GetString("javaclient.topo.addnode.disc.parentnet"));
        jPanel33.add(discParentNet);

        discParentnetCbox.setName("discParentnetCbox");
        jPanel33.add(discParentnetCbox);

        tl1overrideLbl.setText(NmsClientUtil.GetString("javaclient.topo.addnode.override.configuration"));
        jPanel33.add(tl1overrideLbl);

        tl1overrideCbox.setName("tl1overrideCbox");
        jPanel33.add(tl1overrideCbox);

        tl1updateLbl.setText(NmsClientUtil.GetString("javaclient.topo.addnode.update.seedfile"));
        jPanel33.add(tl1updateLbl);

        tl1UpdateCbox.setName("tl1UpdateCbox");
        jPanel33.add(tl1UpdateCbox);

        tl1Panel.add(jPanel33, java.awt.BorderLayout.CENTER);

        jPanel34.setLayout(new java.awt.GridLayout(1, 2));

        jPanel34.setBorder(new javax.swing.border.TitledBorder(NmsClientUtil.GetString("javaclient.topo.addnode.panel.tl1panel")));
        tl1DevGrp.setText(NmsClientUtil.GetString("javaclient.topo.addnode.tl1grpname"));
        tl1DevGrp.setAlignmentX(3.0F);
        tl1DevGrp.setName("nodeLbl");
        tl1DevGrp.setPreferredSize(new java.awt.Dimension(125, 15));
        jPanel34.add(tl1DevGrp);

        tl1GroupCombo.setMaximumSize(new java.awt.Dimension(150, 21));
        tl1GroupCombo.setName("");
        tl1GroupCombo.setPreferredSize(new java.awt.Dimension(150, 21));
        jPanel2.add(tl1GroupCombo);

        jPanel34.add(jPanel2);

        tl1Panel.add(jPanel34, java.awt.BorderLayout.SOUTH);

        corbaPanel.setLayout(new java.awt.CardLayout());

        corbaPanel.setName("corbaPanel");
        corbaPage1.setLayout(new java.awt.BorderLayout());

        jPanel27.setLayout(new java.awt.GridLayout(2, 0, 0, 6));

        corbaPropPanel.setLayout(new java.awt.GridLayout(5, 2, 6, 6));

        corbaPropPanel.setBorder(new javax.swing.border.TitledBorder(NmsClientUtil.GetString("javaclient.topo.addnode.panel.corbaprop")));
        jLabel13.setText(NmsClientUtil.GetString("javaclient.topo.addnode.orbhost"));
        jLabel13.setAlignmentX(3.0F);
        jLabel13.setName("nodeLbl");
        corbaPropPanel.add(jLabel13);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        orbHost.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        orbHost.setAlignmentY(10.0F);
        orbHost.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        orbHost.setMaximumSize(new java.awt.Dimension(200, 21));
        orbHost.setMinimumSize(new java.awt.Dimension(60, 21));
        orbHost.setName("orbHost");
        orbHost.setPreferredSize(new java.awt.Dimension(150, 21));
        jPanel15.add(orbHost);

        corbaPropPanel.add(jPanel15);

        jLabel14.setText(NmsClientUtil.GetString("javaclient.topo.addnode.orbport"));
        jLabel14.setAlignmentX(3.0F);
        jLabel14.setName("nodeLbl");
        corbaPropPanel.add(jLabel14);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        orbPort.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        orbPort.setAlignmentY(10.0F);
        orbPort.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        orbPort.setMaximumSize(new java.awt.Dimension(200, 21));
        orbPort.setMinimumSize(new java.awt.Dimension(60, 21));
        orbPort.setName("orbPort");
        orbPort.setPreferredSize(new java.awt.Dimension(150, 21));
        orbPort.addKeyListener(new KeyAdapter());
        jPanel18.add(orbPort);

        corbaPropPanel.add(jPanel18);

        jLabel15.setText(NmsClientUtil.GetString("javaclient.topo.addnode.orbnameref"));
        jLabel15.setAlignmentX(3.0F);
        jLabel15.setName("nodeLbl");
        corbaPropPanel.add(jLabel15);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        orbNameRef.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        orbNameRef.setAlignmentY(10.0F);
        orbNameRef.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        orbNameRef.setMaximumSize(new java.awt.Dimension(200, 21));
        orbNameRef.setMinimumSize(new java.awt.Dimension(60, 21));
        orbNameRef.setName("orbNameRef");
        orbNameRef.setPreferredSize(new java.awt.Dimension(150, 21));
        jPanel19.add(orbNameRef);

        corbaPropPanel.add(jPanel19);

        jLabel16.setText(NmsClientUtil.GetString("javaclient.topo.addnode.ifname"));
        jLabel16.setAlignmentX(3.0F);
        jLabel16.setName("nodeLbl");
        corbaPropPanel.add(jLabel16);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        orbInterface.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        orbInterface.setAlignmentY(10.0F);
        orbInterface.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        orbInterface.setMaximumSize(new java.awt.Dimension(200, 21));
        orbInterface.setMinimumSize(new java.awt.Dimension(60, 21));
        orbInterface.setName("orbInterface");
        orbInterface.setPreferredSize(new java.awt.Dimension(150, 21));
        jPanel20.add(orbInterface);

        corbaPropPanel.add(jPanel20);

        jLabel17.setText(NmsClientUtil.GetString("javaclient.topo.addnode.orbclass"));
        jLabel17.setAlignmentX(3.0F);
        jLabel17.setName("nodeLbl");
        corbaPropPanel.add(jLabel17);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        orbClass.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        orbClass.setAlignmentY(10.0F);
        orbClass.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        orbClass.setMaximumSize(new java.awt.Dimension(200, 21));
        orbClass.setMinimumSize(new java.awt.Dimension(60, 21));
        orbClass.setName("orbClass");
        orbClass.setPreferredSize(new java.awt.Dimension(150, 21));
        jPanel21.add(orbClass);

        corbaPropPanel.add(jPanel21);

        jPanel27.add(corbaPropPanel);

        moPropPanel.setLayout(new java.awt.GridLayout(3, 2, 6, 12));

        moPropPanel.setBorder(new javax.swing.border.TitledBorder(NmsClientUtil.GetString("javaclient.topo.addnode.panel.moprop")));
        jLabel18.setText(NmsClientUtil.GetString("javaclient.topo.addnode.grpname"));
        jLabel18.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel18.setAlignmentX(0.5F);
        jLabel18.setName("nodeLbl");
        moPropPanel.add(jLabel18);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moGrp.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        moGrp.setAlignmentY(10.0F);
        moGrp.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        moGrp.setMaximumSize(new java.awt.Dimension(200, 21));
        moGrp.setMinimumSize(new java.awt.Dimension(60, 21));
        moGrp.setName("moGrp");
        moGrp.setPreferredSize(new java.awt.Dimension(150, 21));
        jPanel22.add(moGrp);

        moPropPanel.add(jPanel22);

        jLabel19.setText(NmsClientUtil.GetString("javaclient.topo.addnode.type"));
        jLabel19.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel19.setAlignmentX(0.5F);
        jLabel19.setName("nodeLbl");
        moPropPanel.add(jLabel19);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moType.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        moType.setAlignmentY(10.0F);
        moType.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        moType.setMaximumSize(new java.awt.Dimension(200, 21));
        moType.setMinimumSize(new java.awt.Dimension(60, 21));
        moType.setName("moType");
        moType.setPreferredSize(new java.awt.Dimension(150, 21));
        jPanel23.add(moType);

        moPropPanel.add(jPanel23);

        jLabel20.setText(NmsClientUtil.GetString("javaclient.topo.addnode.tester"));
        jLabel20.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel20.setAlignmentX(0.5F);
        jLabel20.setName("nodeLbl");
        moPropPanel.add(jLabel20);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moTester.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        moTester.setAlignmentY(10.0F);
        moTester.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        moTester.setMaximumSize(new java.awt.Dimension(200, 21));
        moTester.setMinimumSize(new java.awt.Dimension(60, 21));
        moTester.setName("moTester");
        moTester.setPreferredSize(new java.awt.Dimension(150, 21));
        jPanel24.add(moTester);

        moPropPanel.add(jPanel24);

        jPanel27.add(moPropPanel);

        corbaPage1.add(jPanel27, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jPanel1.setPreferredSize(new java.awt.Dimension(70, 35));
        nextBtn.setText(NmsClientUtil.GetString("javaclient.topo.addnode.next"));
        nextBtn.addActionListener(formListener);

        jPanel1.add(nextBtn);

        corbaPage1.add(jPanel1, java.awt.BorderLayout.SOUTH);

        corbaPanel.add(corbaPage1, "corbaPage1");

        corbaPage2.setLayout(new java.awt.BorderLayout());

        jPanel26.setLayout(new java.awt.GridLayout(3, 0));

        statusPollPanel.setLayout(new java.awt.GridLayout(3, 2, 0, 3));

        statusPollPanel.setBorder(new javax.swing.border.TitledBorder(NmsClientUtil.GetString("javaclient.topo.addnode.panel.statuspollpanel")));
        jLabel38.setText(NmsClientUtil.GetString("javaclient.topo.addnode.orbif"));
        jLabel38.setAlignmentX(3.0F);
        jLabel38.setName("nodeLbl");
        statusPollPanel.add(jLabel38);

        jPanel42.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        statusPollInterface.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        statusPollInterface.setAlignmentY(10.0F);
        statusPollInterface.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        statusPollInterface.setMaximumSize(new java.awt.Dimension(200, 21));
        statusPollInterface.setMinimumSize(new java.awt.Dimension(60, 21));
        statusPollInterface.setName("statusPollInterface");
        statusPollInterface.setPreferredSize(new java.awt.Dimension(150, 21));
        jPanel42.add(statusPollInterface);

        statusPollPanel.add(jPanel42);

        jLabel39.setText(NmsClientUtil.GetString("javaclient.topo.addnode.nameref"));
        jLabel39.setAlignmentX(3.0F);
        jLabel39.setName("nodeLbl");
        statusPollPanel.add(jLabel39);

        jPanel43.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        statusPollNameRef.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        statusPollNameRef.setAlignmentY(10.0F);
        statusPollNameRef.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        statusPollNameRef.setMaximumSize(new java.awt.Dimension(200, 21));
        statusPollNameRef.setMinimumSize(new java.awt.Dimension(60, 21));
        statusPollNameRef.setName("statusPollNameRef");
        statusPollNameRef.setPreferredSize(new java.awt.Dimension(150, 21));
        jPanel43.add(statusPollNameRef);

        statusPollPanel.add(jPanel43);

        jLabel40.setText(NmsClientUtil.GetString("javaclient.topo.addnode.orb.opername"));
        jLabel40.setAlignmentX(3.0F);
        jLabel40.setName("nodeLbl");
        statusPollPanel.add(jLabel40);

        jPanel44.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        statusPollOperation.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        statusPollOperation.setAlignmentY(10.0F);
        statusPollOperation.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        statusPollOperation.setMaximumSize(new java.awt.Dimension(200, 21));
        statusPollOperation.setMinimumSize(new java.awt.Dimension(60, 21));
        statusPollOperation.setName("statusPollOperation");
        statusPollOperation.setPreferredSize(new java.awt.Dimension(150, 21));
        jPanel44.add(statusPollOperation);

        statusPollPanel.add(jPanel44);

        jPanel26.add(statusPollPanel);

        dataPollPanel.setLayout(new java.awt.GridLayout(2, 2, 0, 3));

        dataPollPanel.setBorder(new javax.swing.border.TitledBorder(NmsClientUtil.GetString("javaclient.topo.addnode.panel.datcolpanel")));
        jLabel41.setText(NmsClientUtil.GetString("javaclient.topo.addnode.orbif"));
        jLabel41.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel41.setAlignmentX(3.0F);
        jLabel41.setName("nodeLbl");
        dataPollPanel.add(jLabel41);

        jPanel45.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        dataColInterface.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        dataColInterface.setAlignmentY(10.0F);
        dataColInterface.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        dataColInterface.setMaximumSize(new java.awt.Dimension(500, 21));
        dataColInterface.setMinimumSize(new java.awt.Dimension(60, 21));
        dataColInterface.setName("dataColInterface");
        dataColInterface.setPreferredSize(new java.awt.Dimension(150, 21));
        jPanel45.add(dataColInterface);

        dataPollPanel.add(jPanel45);

        jLabel42.setText(NmsClientUtil.GetString("javaclient.topo.addnode.nameref"));
        jLabel42.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel42.setAlignmentX(3.0F);
        jLabel42.setName("nodeLbl");
        dataPollPanel.add(jLabel42);

        jPanel46.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        dataColNameRef.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        dataColNameRef.setAlignmentY(10.0F);
        dataColNameRef.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        dataColNameRef.setMaximumSize(new java.awt.Dimension(500, 21));
        dataColNameRef.setMinimumSize(new java.awt.Dimension(60, 21));
        dataColNameRef.setName("dataColNameRef");
        dataColNameRef.setPreferredSize(new java.awt.Dimension(150, 21));
        jPanel46.add(dataColNameRef);

        dataPollPanel.add(jPanel46);

        jPanel26.add(dataPollPanel);

        corbaPage2.add(jPanel26, java.awt.BorderLayout.CENTER);

        jPanel14.setLayout(new java.awt.BorderLayout());

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        backBtn.setText(NmsClientUtil.GetString("javaclient.topo.addnode.back"));
        backBtn.setName("backBtn");
        backBtn.addActionListener(formListener);

        jPanel25.add(backBtn);

        jPanel14.add(jPanel25, java.awt.BorderLayout.SOUTH);

        corbaPage2.add(jPanel14, java.awt.BorderLayout.SOUTH);

        corbaPanel.add(corbaPage2, "corbaPage2");

        snmpPanel.setLayout(new java.awt.BorderLayout());

        snmpPanel.setName("snmpPanel");
        discConfPanel.setLayout(new java.awt.GridLayout(7, 2, 12, 0));

        discConfPanel.setBorder(new javax.swing.border.TitledBorder(NmsClientUtil.GetString("javaclient.topo.addnode.panel.discconf")));
        nodeTypeLbl.setText(NmsClientUtil.GetString("javaclient.topo.addnode.nodetype"));
        nodeTypeLbl.setAlignmentX(3.0F);
        nodeTypeLbl.setName("nodeTypeLbl");
        discConfPanel.add(nodeTypeLbl);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 12, 0));

        jPanel5.setMinimumSize(new java.awt.Dimension(100, 33));
        ipv4.setSelected(true);
        ipv4.setText(NmsClientUtil.GetString("javaclient.topo.addnode.nodetype.ipv4"));
        ipv4.addItemListener(formListener);
	buttonGroup1.add(ipv4);
        jPanel5.add(ipv4);

        ipv6.setText(NmsClientUtil.GetString("javaclient.topo.addnode.nodetype.ipv6"));
        ipv6.addItemListener(formListener);
	buttonGroup1.add(ipv6);
        jPanel5.add(ipv6);

        discConfPanel.add(jPanel5);

        nodeNameLbl.setText(NmsClientUtil.GetString("javaclient.topo.addnode.hostname"));
        nodeNameLbl.setAlignmentX(3.0F);
        nodeNameLbl.setName("nodeLbl");
        discConfPanel.add(nodeNameLbl);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        nodeNameTxt.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        nodeNameTxt.setAlignmentY(10.0F);
        nodeNameTxt.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        nodeNameTxt.setMaximumSize(new java.awt.Dimension(200, 21));
        nodeNameTxt.setMinimumSize(new java.awt.Dimension(60, 21));
        nodeNameTxt.setName("nodeNameTxt");
        nodeNameTxt.setPreferredSize(new java.awt.Dimension(150, 21));
        jPanel7.add(nodeNameTxt);
        nodeNameTxt.getAccessibleContext().setAccessibleName("nodeNameTxt");

        discConfPanel.add(jPanel7);

        netmaskLbl.setText(NmsClientUtil.GetString("javaclient.topo.addnode.netmask"));
        netmaskLbl.setAlignmentX(3.0F);
        discConfPanel.add(netmaskLbl);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 2, 1));

        jPanel6.setBorder(new javax.swing.border.EtchedBorder());
        jPanel6.setMaximumSize(new java.awt.Dimension(170, 33));
        jPanel6.setMinimumSize(new java.awt.Dimension(150, 32));
        jPanel6.setPreferredSize(new java.awt.Dimension(150, 30));
        netmask1.setText("255");
        netmask1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        netmask1.setMaximumSize(new java.awt.Dimension(30, 20));
        netmask1.setMinimumSize(new java.awt.Dimension(27, 20));
        netmask1.setPreferredSize(new java.awt.Dimension(30, 20));
        netmask1.addKeyListener(new KeyAdapter());
        jPanel6.add(netmask1);

        jLabel2.setFont(NmsClientUtil.getFont("DIALOG"));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText(".");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel6.add(jLabel2);

        netmask2.setText("255");
        netmask2.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        netmask2.setMaximumSize(new java.awt.Dimension(30, 21));
        netmask2.setMinimumSize(new java.awt.Dimension(24, 21));
        netmask2.setPreferredSize(new java.awt.Dimension(30, 21));
        netmask2.addKeyListener(new KeyAdapter());
        jPanel6.add(netmask2);

        jLabel3.setFont(NmsClientUtil.getFont("DIALOG"));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText(".");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel6.add(jLabel3);

        netmask3.setText("255");
        netmask3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        netmask3.setMaximumSize(new java.awt.Dimension(30, 21));
        netmask3.setMinimumSize(new java.awt.Dimension(27, 21));
        netmask3.setPreferredSize(new java.awt.Dimension(30, 21));
        netmask3.addKeyListener(new KeyAdapter() );
        jPanel6.add(netmask3);

        jLabel7.setFont(NmsClientUtil.getFont("DIALOG"));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText(".");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel6.add(jLabel7);

        netmask4.setText("0");
        netmask4.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        netmask4.setMaximumSize(new java.awt.Dimension(30, 21));
        netmask4.setMinimumSize(new java.awt.Dimension(27, 21));
        netmask4.setPreferredSize(new java.awt.Dimension(30, 21));
        netmask4.addKeyListener(new KeyAdapter() );
        jPanel6.add(netmask4);

        jPanel8.add(jPanel6);

        discConfPanel.add(jPanel8);

        discoverLbl.setText(NmsClientUtil.GetString("javaclient.topo.addnode.disc.notreachable"));
        discConfPanel.add(discoverLbl);

        discoverCbox.setBorder(new javax.swing.border.TitledBorder(""));
        discConfPanel.add(discoverCbox);

        parentNetLbl.setText(NmsClientUtil.GetString("javaclient.topo.addnode.disc.parentnet"));
        discConfPanel.add(parentNetLbl);

        parentNetCbox.setSelected(true);
        discConfPanel.add(parentNetCbox);

        overrideLbl.setText(NmsClientUtil.GetString("javaclient.topo.addnode.override.configuration"));
        discConfPanel.add(overrideLbl);

        discConfPanel.add(overrideCbox);

        updateLbl.setText(NmsClientUtil.GetString("javaclient.topo.addnode.update.seedfile"));
        discConfPanel.add(updateLbl);

        discConfPanel.add(updateCbox);

        snmpPanel.add(discConfPanel, java.awt.BorderLayout.CENTER);

        snmpConfPanel.setLayout(new java.awt.GridLayout(5, 2, 12, 0));

        snmpConfPanel.setBorder(new javax.swing.border.TitledBorder(NmsClientUtil.GetString("javaclient.topo.addnode.panel.snmpconf")));
        communityLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        communityLbl.setText(NmsClientUtil.GetString("javaclient.topo.addnode.community"));
        communityLbl.setAlignmentX(3.0F);
        communityLbl.setName("nodeLbl");
        snmpConfPanel.add(communityLbl);

        jPanel9.setLayout(new java.awt.GridLayout(1, 2, 24, 0));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jPanel11.setPreferredSize(new java.awt.Dimension(160, 25));
        communityTxt.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        communityTxt.setText("public");
        communityTxt.setAlignmentY(10.0F);
        communityTxt.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        communityTxt.setMaximumSize(new java.awt.Dimension(200, 21));
        communityTxt.setMinimumSize(new java.awt.Dimension(60, 21));
        communityTxt.setName("nodeTxtField");
        communityTxt.setPreferredSize(new java.awt.Dimension(150, 21));
        jPanel11.add(communityTxt);

        jPanel9.add(jPanel11);

        snmpConfPanel.add(jPanel9);

        portLbl.setText(NmsClientUtil.GetString("javaclient.topo.addnode.agentport"));
        portLbl.setAlignmentX(3.0F);
        portLbl.setName("nodeLbl");
        snmpConfPanel.add(portLbl);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jPanel10.setPreferredSize(new java.awt.Dimension(160, 21));
        portTxt.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        portTxt.setText("161");
        portTxt.setAlignmentY(10.0F);
        portTxt.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        portTxt.setMaximumSize(new java.awt.Dimension(200, 21));
        portTxt.setMinimumSize(new java.awt.Dimension(60, 21));
        portTxt.setName("portTxt");
        portTxt.setPreferredSize(new java.awt.Dimension(150, 21));
        portTxt.addKeyListener(new KeyAdapter());
        jPanel10.add(portTxt);
        portTxt.getAccessibleContext().setAccessibleName("portTxt");

        snmpConfPanel.add(jPanel10);

        v3Lbl.setText(NmsClientUtil.GetString("javaclient.topo.addnode.snmp.v3"));
        v3Lbl.setAlignmentX(3.0F);
        v3Lbl.setName("nodeLbl");
        snmpConfPanel.add(v3Lbl);

        v3Cbox.addChangeListener(formListener);

        snmpConfPanel.add(v3Cbox);

        usernameLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        usernameLbl.setText(NmsClientUtil.GetString("javaclient.topo.addnode.snmp.username"));
        usernameLbl.setAlignmentX(3.0F);
        usernameLbl.setName("nodeLbl");
        usernameLbl.setEnabled(false);
        usernameLbl.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        snmpConfPanel.add(usernameLbl);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jPanel16.setLayout(new java.awt.BorderLayout());

        usernameTxt.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        usernameTxt.setAlignmentY(10.0F);
        usernameTxt.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        usernameTxt.setMaximumSize(new java.awt.Dimension(200, 21));
        usernameTxt.setMinimumSize(new java.awt.Dimension(60, 21));
        usernameTxt.setName("nodeTxtField");
        usernameTxt.setNextFocusableComponent(contextnameTxt);
        usernameTxt.setPreferredSize(new java.awt.Dimension(150, 21));
        usernameTxt.setEnabled(false);
        jPanel16.add(usernameTxt, java.awt.BorderLayout.CENTER);

        jPanel12.add(jPanel16);

        snmpConfPanel.add(jPanel12);

        contextnameLbl.setText(NmsClientUtil.GetString("javaclient.topo.addnode.snmp.contextname"));
        contextnameLbl.setAlignmentX(3.0F);
        contextnameLbl.setName("nodeLbl");
        contextnameLbl.setEnabled(false);
        snmpConfPanel.add(contextnameLbl);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jPanel17.setLayout(new java.awt.GridLayout(1, 1, 4, 4));

        contextnameTxt.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        contextnameTxt.setAlignmentY(10.0F);
        contextnameTxt.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        contextnameTxt.setMaximumSize(new java.awt.Dimension(200, 21));
        contextnameTxt.setMinimumSize(new java.awt.Dimension(60, 21));
        contextnameTxt.setName("nodeTxtField");
        contextnameTxt.setPreferredSize(new java.awt.Dimension(150, 21));
        contextnameTxt.setEnabled(false);
        jPanel17.add(contextnameTxt);

        jPanel13.add(jPanel17);

        snmpConfPanel.add(jPanel13);

        snmpPanel.add(snmpConfPanel, java.awt.BorderLayout.SOUTH);

        getContentPane().setLayout(new java.awt.BorderLayout(12, 0));

        setTitle(NmsClientUtil.GetString("javaclient.topo.addnode.addnode"));
        setResizable(false);
        tabPane.setMinimumSize(new java.awt.Dimension(400, 350));
        tabPane.setOpaque(true);
        tabPane.addChangeListener(formListener);

        getContentPane().add(tabPane, java.awt.BorderLayout.CENTER);

        bottomPanel.setLayout(new java.awt.BorderLayout(0, 2));

        bottomPanel.setMinimumSize(new java.awt.Dimension(143, 70));
        bottomPanel.setName("bottomPanel");
        bottomPanel.setPreferredSize(new java.awt.Dimension(223, 70));
        statusPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        statusPanel.setBackground(new Color(infCol[0],infCol[1],infCol[2]));
        statusPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        statusPanel.setName("statusPanel");
        status.setFont(NmsClientUtil.getFont("DIALOG"));
        status.setForeground(Color.black);
        status.setText(NmsClientUtil.GetString("javaclient.topo.addnode.addnode"));
        status.setName("status");
        status.setRequestFocusEnabled(false);
        statusPanel.add(status);
        status.getAccessibleContext().setAccessibleName("status");

        bottomPanel.add(statusPanel, java.awt.BorderLayout.SOUTH);
        statusPanel.getAccessibleContext().setAccessibleName("statusPanel");

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        //jPanel4.setMinimumSize(new java.awt.Dimension(133, 30));
        //jPanel4.setPreferredSize(new java.awt.Dimension(157, 30));
        addNodeBtn.setText(NmsClientUtil.GetString("javaclient.topo.addnode.addnode"));
        addNodeBtn.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        addNodeBtn.setLabel(NmsClientUtil.GetString("javaclient.topo.addnode.addnode"));
        //addNodeBtn.setMaximumSize(new java.awt.Dimension(53, 25));
        //addNodeBtn.setMinimumSize(new java.awt.Dimension(53, 25));
        //addNodeBtn.setPreferredSize(new java.awt.Dimension(60, 25));
        addNodeBtn.addActionListener(this);
        jPanel4.add(addNodeBtn);

        clearBtn.setText(NmsClientUtil.GetString("javaclient.topo.addnode.clear"));
        clearBtn.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        clearBtn.setLabel(NmsClientUtil.GetString("javaclient.topo.addnode.clear"));
        //clearBtn.setPreferredSize(new java.awt.Dimension(40, 25));
        clearBtn.addActionListener(this);
        jPanel4.add(clearBtn);

        closeBtn.setText(NmsClientUtil.GetString("javaclient.topo.addnode.close"));
        closeBtn.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        closeBtn.setLabel(NmsClientUtil.GetString("javaclient.topo.addnode.close"));
        //closeBtn.setPreferredSize(new java.awt.Dimension(37, 25));
        closeBtn.addActionListener(formListener);

        jPanel4.add(closeBtn);

        bottomPanel.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jLabel1.setText(NmsClientUtil.GetString("javaclient.topo.addnode.processinbackground"));
        jPanel3.add(jLabel1);

        processInBgCbox.setName("processInBgCbox");
        jPanel3.add(processInBgCbox);
        processInBgCbox.getAccessibleContext().setAccessibleName("processInBgCbox");

        bottomPanel.add(jPanel3, java.awt.BorderLayout.NORTH);

        getContentPane().add(bottomPanel, java.awt.BorderLayout.SOUTH);

        jLabel4.setIcon(getIcon(".//images//addnode_topband.png"));
        jLabel4.setIconTextGap(0);
        jLabel4.setName("topImageLbl");
        topPanel.add(jLabel4);

        getContentPane().add(topPanel, java.awt.BorderLayout.NORTH);

    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, javax.swing.event.ChangeListener, java.awt.event.ItemListener {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == nextBtn) {
                AddNodePanel.this.nextBtnActionPerformed(evt);
            }
            else if (evt.getSource() == backBtn) {
                AddNodePanel.this.backBtnActionPerformed(evt);
            }
            else if (evt.getSource() == closeBtn) {
                AddNodePanel.this.closeBtnActionPerformed(evt);
            }
        }

        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            if (evt.getSource() == v3Cbox) {
                AddNodePanel.this.v3CboxStateChanged(evt);
            }
            else if (evt.getSource() == tabPane) {
                AddNodePanel.this.tabPaneStateChanged(evt);
            }
        }

	public void itemStateChanged(ItemEvent evt)
	{
		if(evt.getItem() == ipv4)
		{
			netmaskLbl.setVisible(true);
			jPanel8.setVisible(true);

			overrideLbl.setVisible(true);
			overrideCbox.setVisible(true);

			parentNetLbl.setVisible(true);
			parentNetCbox.setVisible(true);

		}
		else if(evt.getItem() == ipv6)
		{
			netmaskLbl.setVisible(false);
			jPanel8.setVisible(false);

			overrideLbl.setVisible(false);
			overrideCbox.setVisible(false);

			parentNetLbl.setVisible(false);
			parentNetCbox.setVisible(false);
		}
	}

    }//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        ((CardLayout)corbaPanel.getLayout()).show(corbaPanel, "corbaPage1");//No Internationalization
    }//GEN-LAST:event_backBtnActionPerformed

    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed
        ((CardLayout)corbaPanel.getLayout()).show(corbaPanel, "corbaPage2");//No Internationalization
    }//GEN-LAST:event_nextBtnActionPerformed

    private Icon getIcon(String image){
        String imagePath=null;
        if(NmsClientUtil.applet!=null){
            imagePath=NmsClientUtil.applet.getDocumentBase() +    "../"+image;//No Internationalization
        }
        if(imagePath==null){
            return null;
        }
        try{
            return NmsClientUtil.getImageIcon(new URL(imagePath));
        }
        catch(Exception e){
            return null;
        }
        
    }
    
    private void tabPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabPaneStateChanged
        JTabbedPane pane = (JTabbedPane)evt.getSource();
        JPanel selPanel = (JPanel)pane.getSelectedComponent();
        tabPane.setSelectedComponent(selPanel);
    }//GEN-LAST:event_tabPaneStateChanged

    private boolean validateCORBAPanel()
    {
        if (orbHost.getText().trim().length()==0)
        {
            showErrorMsg(NmsClientUtil.GetString("javaclient.topo.addnode.msg.orbhost"));
            return false;
        }
        try{
            int port = Integer.parseInt(orbPort.getText().trim());
            if(port > 65535 || port <0)
            {
                showErrorMsg(NmsClientUtil.GetString("javaclient.topo.addnode.msg.orbport"));
                return false;
            }
        }catch (Exception e)
        {
            showErrorMsg(NmsClientUtil.GetString("javaclient.topo.addnode.msg.orbport"));
            return false;
        }
        if (orbNameRef.getText().trim().length()==0)
        {
            showErrorMsg(NmsClientUtil.GetString("Please enter a valid ORB Name Reference."));
            return false;
        }
        if (orbInterface.getText().trim().length()==0)
        {
            showErrorMsg(NmsClientUtil.GetString("javaclient.topo.addnode.msg.orbInterface"));
            return false;
        }
        if (orbClass.getText().trim().length()==0)
        {
            showErrorMsg(NmsClientUtil.GetString("javaclient.topo.addnode.msg.orbclass"));
            return false;
        }
        if (moGrp.getText().trim().length()==0)
        {
            showErrorMsg(NmsClientUtil.GetString("javaclient.topo.addnode.msg.mogrp"));
            return false;
        }
        if (moType.getText().trim().length()==0)
        {
            showErrorMsg(NmsClientUtil.GetString("javaclient.topo.addnode.msg.motype"));
            return false;
        }
        return true;
    }
    
    private boolean validateTL1Panel()
    {
        if (tl1HostTxt.getText().trim().length()==0)
        {
            showErrorMsg(NmsClientUtil.GetString("javaclient.topo.addnode.msg.host"));
            return false;
        }
        if (!validateNetmask(new String[]{tl1mask1.getText().trim(), tl1mask2.getText().trim(), tl1mask3.getText().trim(),tl1mask4.getText().trim()}))
        {
            showErrorMsg(NmsClientUtil.GetString("javaclient.topo.addnode.msg.netmask"));
            return false;
        }
        return true;
    }
    private boolean validateSnmpPanel()
    {
        if (nodeNameTxt.getText().trim().length()==0)
        {
            showErrorMsg(NmsClientUtil.GetString("javaclient.topo.addnode.msg.host"));
            return false;
        }
        
        //if required incorporate check for validity of the host name also.
        if (!validateNetmask(new String[] {netmask1.getText().trim(), netmask2.getText().trim(), netmask3.getText().trim(), netmask4.getText().trim()}))
        {
            showErrorMsg(NmsClientUtil.GetString("javaclient.topo.addnode.msg.netmask"));
            return false;
        }
        
        try{
            int port = Integer.parseInt(portTxt.getText().trim());
            if(port > 65535 || port <0)
            {
                showErrorMsg(NmsClientUtil.GetString("javaclient.topo.addnode.msg.snmpport"));
                return false;
            }
        }catch (Exception e)
        {
            showErrorMsg(NmsClientUtil.GetString("javaclient.topo.addnode.msg.snmpport"));
            return false;
        }
        
        if (v3Cbox.isSelected())
        {
            if (usernameTxt.getText().trim().length()==0)
            {
                showErrorMsg(NmsClientUtil.GetString("javaclient.topo.addnode.msg.username"));
                return false;
            }

            //Commented as context name can be null
            /*if (contextnameTxt.getText().trim().length()==0)
            {
                showErrorMsg(NmsClientUtil.GetString("javaclient.topo.addnode.msg.contextname"));
                return false;
            }*/
        }
        return true;
    }
    
    private boolean validateNetmask(String[] net)
    {
        for (int i=0; i<net.length; i++)
        {
            try{
                if (net[i].length()==0 || Integer.parseInt(net[i])<0 || Integer.parseInt(net[i])>255)
                    return false;
            }catch(NumberFormatException nfe)
            {
                return false;
            }
        }
        return true;
    }
    
    private void showErrorMsg(String msg)
    {
        JOptionPane.showMessageDialog(this,msg,NmsClientUtil.GetString("javaclient.topo.addnode.msg.invalidentry"),JOptionPane.ERROR_MESSAGE);
    }
    class KeyAdapter implements KeyListener {
    public void keyTyped(KeyEvent e) {
        char c = e.getKeyChar();
        if (!((c >= '0') && (c <= '9') ||
        (c == KeyEvent.VK_BACK_SPACE) ||
        (c == KeyEvent.VK_DELETE))) {
            getToolkit().beep();
            e.consume();
        }
    }
    public void keyPressed(KeyEvent e)
    {
        
    }
    
    public void keyReleased(KeyEvent e){
        
    }
}
    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        AddNodePanel.open = false;
        GenericSession.getInstance().deRegister(this);
        //JFrame frame = (JFrame)evt.getSource();
        this.dispose();
    }//GEN-LAST:event_closeBtnActionPerformed


    private void v3CboxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_v3CboxStateChanged
        if (((JCheckBox)evt.getSource()).isSelected())
        {
            usernameLbl.setEnabled(true);
            usernameTxt.setEnabled(true);
            contextnameLbl.setEnabled(true);
            contextnameTxt.setEnabled(true);
        }else
        {
            usernameLbl.setEnabled(false);
            usernameTxt.setEnabled(false);
            contextnameLbl.setEnabled(false);
            contextnameTxt.setEnabled(false);
        }

    }//GEN-LAST:event_v3CboxStateChanged

    /** Exit the Application */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new AddNodePanel().show();
    }

    public void init(javax.swing.JApplet app) {
        applet = app;
        Runnable initTheUI = new Runnable() {
            public void run() { initialize(); }
        };
        SwingUtilities.invokeLater(initTheUI);
    }
    
    private void initialize(){
        String protocols[]={"SNMP","TL1","CORBA"};//No Internationalization
        String icon =applet.getParameter("FRAME_ICON");//No Internationalization
	String protocol =applet.getParameter("PROTOCOL");//No Internationalization
	if(protocol!=null)
	{
		int i=0;
		StringTokenizer st=new StringTokenizer(protocol,",");
		int count=st.countTokens();
		protocols=new String[count];
		while(st.hasMoreTokens())
		{
			protocols[i]=st.nextToken();
			i++;
		}
	}
        setIconImage(NmsClientUtil.getImage(applet.getDocumentBase() + icon));
	String info=NmsClientUtil.applet.getParameter("INFORMATION_COLOR");//No Internationalisation
	if(info==null){
		info="223-223-223";//No Internationalisation
	}
	String error=NmsClientUtil.applet.getParameter("ERROR_COLOR");//No Internationalisation
	if(error==null){
		error="223-223-223";//No Internationalisation
	}        
        infCol = colorToInt(info);
        errCol = colorToInt(error);
        initComponents();
        addWindowListener(this);
        if (rememberProps != null)
            fillProperties();
        setTheUI(protocols);
        
        nodeNameTxt.requestFocus();
    }
    
    private void fillProperties() {
        //setting snmp panel properties.
        if (rememberProps.getProperty("snmpNode") != null) {
            if (rememberProps.getProperty("nodeType").equals("IPV4")) {
                ipv4.setSelected(true);
                ipv6.setSelected(false);
            }else {
                ipv4.setSelected(false);
                ipv6.setSelected(true);
            }
            nodeNameTxt.setText(rememberProps.getProperty("snmpNode"));
            netmask1.setText(rememberProps.getProperty("snmpNet1"));
            netmask2.setText(rememberProps.getProperty("snmpNet2"));
            netmask3.setText(rememberProps.getProperty("snmpNet3"));
            netmask4.setText(rememberProps.getProperty("snmpNet4"));
            if ((rememberProps.getProperty("snmpDiscUnreachable")!= null) && (rememberProps.getProperty("snmpDiscUnreachable").equals("true")))
                discoverCbox.setSelected(true);
            else
                discoverCbox.setSelected(false);
            if ((rememberProps.getProperty("snmpDiscParentnet")!=null)&&(rememberProps.getProperty("snmpDiscParentnet").equals("true")))
                parentNetCbox.setSelected(true);
            else
                parentNetCbox.setSelected(false);
            if ((rememberProps.getProperty("snmpDiscOverride")!=null)&&(rememberProps.getProperty("snmpDiscOverride").equals("true")))
                overrideCbox.setSelected(true);
            else
                overrideCbox.setSelected(false);
            if ((rememberProps.getProperty("snmpDiscUpdate")!=null)&&(rememberProps.getProperty("snmpDiscUpdate").equals("true")))
                updateCbox.setSelected(true);
            else
                updateCbox.setSelected(false);
            communityTxt.setText(rememberProps.getProperty("community"));
            portTxt.setText(rememberProps.getProperty("snmpPort"));
            if ((rememberProps.getProperty("snmpV3")!=null)&&(rememberProps.getProperty("snmpV3").equals("true"))) {
                v3Cbox.setSelected(true);
                usernameTxt.setText(rememberProps.getProperty("snmpUsername"));
                contextnameTxt.setText(rememberProps.getProperty("snmpContext"));
            }
            else
                v3Cbox.setSelected(false);
        }
        //setting TL1 properties
        if (rememberProps.getProperty("tl1Node") != null) {
            tl1HostTxt.setText(rememberProps.getProperty("tl1Node"));
            tl1mask1.setText(rememberProps.getProperty("tl1Net1"));
            tl1mask2.setText(rememberProps.getProperty("tl1Net2"));
            tl1mask3.setText(rememberProps.getProperty("tl1Net3"));
            tl1mask4.setText(rememberProps.getProperty("tl1Net4"));
            if ((rememberProps.getProperty("tl1DiscUnreachable")!=null)&&(rememberProps.getProperty("tl1DiscUnreachable").equals("true")))
                discUnreachableCbox.setSelected(true);
            else
                discUnreachableCbox.setSelected(false);
            if ((rememberProps.getProperty("tl1DiscParentnet")!=null)&&(rememberProps.getProperty("tl1DiscParentnet").equals("true")))
                discParentnetCbox.setSelected(true);
            else
                discParentnetCbox.setSelected(false);
            if ((rememberProps.getProperty("tl1DiscOverride")!=null)&&(rememberProps.getProperty("tl1DiscOverride").equals("true")))
                tl1overrideCbox.setSelected(true);
            else
                tl1overrideCbox.setSelected(false);
            if ((rememberProps.getProperty("tl1DiscUpdate")!=null)&&(rememberProps.getProperty("tl1DiscUpdate").equals("true")))
                tl1UpdateCbox.setSelected(true);
            else
                tl1UpdateCbox.setSelected(false);
        }
        //setting CORBA Properties
        if (rememberProps.getProperty("orbHost") != null) {
            orbHost.setText(rememberProps.getProperty("orbHost"));
            orbPort.setText(rememberProps.getProperty("orbPort"));
            orbNameRef.setText(rememberProps.getProperty("orbNameRef"));
            orbInterface.setText(rememberProps.getProperty("orbInterface"));
            moGrp.setText(rememberProps.getProperty("orbGrpName"));
            moTester.setText(rememberProps.getProperty("orbUClass"));
            moType.setText(rememberProps.getProperty("moType"));
            
            statusPollNameRef.setText(rememberProps.getProperty("statusNameRef"));
            statusPollInterface.setText(rememberProps.getProperty("statusInterface"));
            statusPollOperation.setText(rememberProps.getProperty("statusOperation"));
            
            dataColNameRef.setText(rememberProps.getProperty("datacolNameRef"));
            dataColInterface.setText(rememberProps.getProperty("datacolInterface"));
        }
    }
    
    private void setTheUI(String[] protocols) {
        visible=true;
        for (int i=0; i<protocols.length; i++) {
            if(protocols[i].equalsIgnoreCase("snmp")) {
                tabPane.addTab(NmsClientUtil.GetString("javaclient.topo.addnode.snmptab"), snmpPanel);
            }
            else if(protocols[i].equalsIgnoreCase("tl1")) {
                tl1ClientSocConn = TL1ClientSocketConn.getInstance();
                tl1DeviceGroupNames = tl1ClientSocConn.getDeviceGroupNames();
                
                if( tl1DeviceGroupNames!=null && tl1DeviceGroupNames.size()>0) {
                    tabPane.addTab(NmsClientUtil.GetString("javaclient.topo.addnode.tl1tab"), tl1Panel);
                    for (int j=0; j<tl1DeviceGroupNames.size();j++) {
                        tl1GroupCombo.addItem(tl1DeviceGroupNames.get(j));
                    }
                }else if ( tl1DeviceGroupNames==null )
                {
                	if(NmsClientUtil.debugMode)
               		{
               			System.out.println(NmsClientUtil.GetString("javaclient.topo.addnode.tl1tabError"));
                		//Error string will be printed in log console: "Unable to connect through TL1 socket, disabling Add TL1 Node tab."
                	}
                }
            }
            else if(protocols[i].equalsIgnoreCase("corba")) {
                tabPane.addTab(NmsClientUtil.GetString("javaclient.topo.addnode.corbatab"), corbaPanel);
            }
            
        }
        pack();
        NmsClientUtil.centerWindow(this);
        this.setVisible(true);
    }
    
    private int[]  colorToInt(String str) {
        int i=0;
        int[] RGB = new int[3];
        StringTokenizer strTok = new StringTokenizer(str,"-");//No Internationalisation
        while(strTok.hasMoreTokens()) {
            try {
                String one =strTok.nextToken().trim();
                RGB[i] = Integer.parseInt(one);
                i++;
            }
            catch(NumberFormatException nme) {
                
                nme.printStackTrace();
            }
        }
        return RGB;
    }

    public void setVisible(boolean b)
    { 
        if(visible)
            super.setVisible(b);
        else
        {
            super.setVisible(false);
        }
    }
    
    /**
     * This method takes care of processing the response received from the server for the addNode request.
     */
    public void callBack(ResultEventObject evt) {
        
        int id = evt.getEventType();
        String status1=null;
        if(id == GenericConstants.ADD_NODE)
        {DataInputStream dis = null;
         try{
             dis = new DataInputStream(evt.getResultEventData());
             //int ind = dis.readInt();
             status1 = dis.readUTF();
             
             //When process in background is enabled.
             if(returnImmediately) {
                 status1 = NmsClientUtil.GetString("javaclient.topo.addnode.msg.referevents");
             }
             //When processing message is received from server
             if(status != null && status1.equals(NmsClientUtil.GetString("javaclient.topo.addnode.msg.processing"))) {
                 status1 = status1 + ".......";//No Internationalisation
             }
             
             if (!(status1.indexOf("Successfully")==-1)) {
                 statusPanel.setBackground(new Color(infCol[0],infCol[1],infCol[2]));
                 status.setForeground(Color.black);
             }else {
                 statusPanel.setBackground(new Color(errCol[0],errCol[1],errCol[2]));
                 status.setForeground(Color.white);
             }
             status.setText(status1);
             NmsClientUtil.normalCursor(this);
         }
         catch(Exception e ) {
             e.printStackTrace();
             statusPanel.setBackground(new Color(errCol[0],errCol[1],errCol[2]));
             status.setForeground(Color.white);
             status.setText(NmsClientUtil.GetString("javaclient.topo.addnode.msg.error"));
             NmsClientUtil.normalCursor(this);
         }finally {
             try{
                 if (dis!=null)
                     dis.close();
             }catch(IOException ioe) {
                 //do nothing stream already closed.
             }
         }
        }
    }
    
    public void windowIconified(WindowEvent evt) {
    }
    public void windowMaximised(WindowEvent evt) {
    }
    public void windowDeiconified(WindowEvent evt) {
    }
    public void windowOpened(WindowEvent evt) {
    }
    public void windowDeactivated(WindowEvent evt) {
    }
    public void windowActivated(WindowEvent evt) {
    }
    public void windowClosed(WindowEvent evt) {
    }
    
    
    public void  windowClosing(WindowEvent evt) {
        AddNodePanel.open = false;
        GenericSession.getInstance().deRegister(this);
        //JFrame frame = (JFrame)evt.getSource();
        this.setVisible(false);
        this.dispose();
    }
    
    public void actionPerformed(ActionEvent ae) {
        String action = ae.getActionCommand();
        if (action.equals(NmsClientUtil.GetString("javaclient.topo.addnode.addnode"))) {
            if (rememberProps==null)
                rememberProps=new Properties();
            status.setText(NmsClientUtil.GetString("javaclient.topo.addnode.addnode"));
            statusPanel.setBackground(new Color(infCol[0],infCol[1],infCol[2]));
            status.setForeground(Color.black);
            StringBuffer reply = new StringBuffer();
            p = new Properties() ;
            boolean inputok = false;
            JPanel panel = (JPanel)tabPane.getSelectedComponent();
            if (panel.getName().equals("snmpPanel")) {
                NmsClientUtil.busyCursor(this);
                inputok = validateSnmpPanel();
                if (!inputok) {
                    NmsClientUtil.normalCursor(this);
                    return;
                }
                
                //fill the properties to send to server
                if (ipv4.isSelected()) {
                    p.put("IPType", "IPV4");
                    rememberProps.put("nodeType", "IPV4");
                }
                else {
                    p.put("IPType",  "IPV6");
                    rememberProps.put("nodeType", "IPV6");
                }
                p.put("Node",  nodeNameTxt.getText().trim());
                rememberProps.put("snmpNode",  nodeNameTxt.getText().trim());
                p.put("NetMask",  netmask1.getText().trim()+"."+netmask2.getText().trim()+"."+netmask3.getText().trim()+"."+netmask4.getText().trim());
                rememberProps.put("snmpNet1", netmask1.getText().trim());
                rememberProps.put("snmpNet2", netmask2.getText().trim());
                rememberProps.put("snmpNet3", netmask3.getText().trim());
                rememberProps.put("snmpNet4", netmask4.getText().trim());
                if (discoverCbox.isSelected()) {
                    p.put("Add Even If Node Not Reachable", "true");//if this property is not present then it defaults to false.
                    rememberProps.put("snmpDiscUnreachable", "true");
                }
                if (parentNetCbox.isSelected()) {
                    p.put("discoverParentNet", "true");//if this property is not present then it defaults to false.
                    rememberProps.put("snmpDiscParentnet", "true");
                }
                if (overrideCbox.isSelected()) {
                    p.put("Add Overriding SeedFile Configuration", "true");//if this property is not present then it defaults to false.
                    rememberProps.put("snmpDiscOverride", "true");
                }
                if (updateCbox.isSelected()) {
                    p.put("writeToSeedFile", "true");//if this property is not present then it defaults to false.
                    rememberProps.put("snmpDiscUpdate", "true");
                }
                if (communityTxt.getText().trim().length()==0)
                    p.put("community", "null");
                else {
                    p.put("community", communityTxt.getText().trim());
                    rememberProps.put("community", communityTxt.getText().trim());
                }
                p.put("SnmpAgentPort", portTxt.getText().trim());
                rememberProps.put("snmpPort", portTxt.getText().trim());
                p.put("isSNMP", "true");
                if (v3Cbox.isSelected()) {
                    p.put("snmpVersion", "v3");
                    p.put("UserName", usernameTxt.getText().trim());
                    p.put("contextName", contextnameTxt.getText().trim());
                    rememberProps.put("snmpV3", "true");
                    rememberProps.put("snmpUsername", usernameTxt.getText().trim());
                    rememberProps.put("snmpContext", contextnameTxt.getText().trim());
                }else
                    rememberProps.put("snmpV3", "false");
                //check if you need to wait for the server response.
                if (processInBgCbox.isSelected()) {
                    p.put("Return Immediately After Submitting Request",  "true");
                    returnImmediately = true;
                }else
                    returnImmediately= false;
                statusPanel.setBackground(new Color(errCol[0],errCol[1],errCol[2]));
                status.setForeground(Color.white);
                status.setText(NmsClientUtil.GetString("javaclient.topo.addnode.msg.processingreq"));
                
                //submitting request to server
                ByteArrayOutputStream byteStream =null;
                DataOutputStream outp = null;
                try{
                    byteStream = new ByteArrayOutputStream();
                    outp = new DataOutputStream(byteStream);
                    outp.writeInt(GenericConstants.ADD_NODE);
                    outp.writeBoolean(returnImmediately);
                    byte[] serverData = NmsClientUtil.serializeProperties((Properties)p);
                    int len = serverData.length;
                    outp.writeInt(len);
                    outp.write(serverData,0,len);
                    outp.flush();
                    
                    byte[] bytes = byteStream.toByteArray();
                    outp.close();
                    byteStream.reset();
                    byteStream.close();
                    GenericSession.getInstance().send(bytes);
                }
                catch (Exception e) {
                    NmsClientUtil.err(NmsClientUtil.getFrame(applet),NmsClientUtil.GetString("javaclient.topo.addnode.msg.ioerror"));
                    //e.printStackTrace();
                }finally {
                    try{
                        if (byteStream != null)
                            byteStream.close();
                        if (outp!= null)
                            outp.close();
                    }catch(IOException ioe) {
                        //do nothing stream already closed.
                    }
                }
            }
            
            //Processing for TL1Panel
            
            else if (panel.getName().equals("tl1Panel")) {
                NmsClientUtil.busyCursor(this);
                inputok = validateTL1Panel();
                if (!inputok) {
                    NmsClientUtil.normalCursor(this);
                    return;
                }
                
                //fill the properties to send to server
                p.put("Node",  tl1HostTxt.getText().trim());
                p.put("NetMask",  tl1mask1.getText().trim()+"."+tl1mask2.getText().trim()+"."+tl1mask3.getText().trim()+"."+tl1mask4.getText().trim());
                rememberProps.put("tl1Node", tl1HostTxt.getText().trim());
                rememberProps.put("tl1Net1", tl1mask1.getText().trim());
                rememberProps.put("tl1Net2", tl1mask2.getText().trim());
                rememberProps.put("tl1Net3", tl1mask3.getText().trim());
                rememberProps.put("tl1Net4", tl1mask4.getText().trim());
                if (discUnreachableCbox.isSelected()) {
                    p.put("Add Even If Node Not Reachable", "true");
                    rememberProps.put("tl1DiscUnreachable", "true");
                }
                if (discParentnetCbox.isSelected()) {
                    p.put("discoverParentNet", "true");
                    rememberProps.put("tl1DiscParentnet", "true");
                }
                if (tl1overrideCbox.isSelected()) {
                    p.put("Add Overriding SeedFile Configuration", "true");
                    rememberProps.put("tl1DiscOverride", "true");
                }
                
                if (tl1UpdateCbox.isSelected()) {
                    p.put("writeToSeedFile", "true");
                    rememberProps.put("tl1DiscUpdate", "true");
                }
                String deviceName = (String)tl1GroupCombo.getSelectedItem();
                if (deviceName != null) {
                    p.put("deviceGroupName", deviceName);
                }
                
                //check if you need to wait for the server response.
                if (processInBgCbox.isSelected()) {
                    p.put("Return Immediately After Submitting Request",  "true");
                    returnImmediately = true;
                }else
                    returnImmediately= false;
                //submitting request to server
                statusPanel.setBackground(new Color(errCol[0],errCol[1],errCol[2]));
                status.setForeground(Color.white);
                status.setText(NmsClientUtil.GetString("javaclient.topo.addnode.msg.processingreq"));
                String tl1Message = null;
                if (!returnImmediately) {
                    tl1Message = tl1ClientSocConn.addTL1Node(p);
                    if (!(tl1Message.indexOf("Successfully")==-1)) {
                        statusPanel.setBackground(new Color(infCol[0],infCol[1],infCol[2]));
                        status.setForeground(Color.black);
                    }else {
                        statusPanel.setBackground(new Color(errCol[0],errCol[1],errCol[2]));
                        status.setForeground(Color.white);
                    }
                    status.setText(tl1Message);
                    NmsClientUtil.normalCursor(this);
                }else {
                    thr = new Thread(this,"Add Node Sync Thread");//No Internationalisation
                    thr.start();
                }
            }
            
            //Processing for CORBAPanel
            
            else if (panel.getName().equals("corbaPanel")) {
                NmsClientUtil.busyCursor(this);
                inputok = validateCORBAPanel();
                if (!inputok) {
                    NmsClientUtil.normalCursor(this);
                    return;
                }
                
                //fill the properties to send to server
                p.put("ORBHost", orbHost.getText().trim());
                p.put("ORBPort", orbPort.getText().trim());
                p.put("ORBClass", orbClass.getText().trim());
                p.put("nameRef", orbNameRef.getText().trim());
                p.put("interface", orbInterface.getText().trim());
                p.put("GroupName", moGrp.getText().trim());
                p.put("uClass", moTester.getText().trim());
                p.put("TYPE", moType.getText().trim());
                
                rememberProps.put("orbHost", orbHost.getText().trim());
                rememberProps.put("orbPort",orbPort.getText().trim());
                rememberProps.put("orbClass", orbClass.getText().trim());
                rememberProps.put("orbNameRef", orbNameRef.getText().trim());
                rememberProps.put("orbInterface", orbInterface.getText().trim());
                rememberProps.put("orbGrpName", moGrp.getText().trim());
                rememberProps.put("orbUClass", moTester.getText().trim());
                rememberProps.put("moType", moType.getText().trim());
                
                Hashtable statPollHt = new Hashtable();
                statPollHt.put("nameRef",statusPollNameRef.getText().trim());
                statPollHt.put("interface",statusPollInterface.getText().trim());
                statPollHt.put("operation",statusPollOperation.getText().trim());
                
                rememberProps.put("statusNameRef", statusPollNameRef.getText().trim());
                rememberProps.put("statusInterface", statusPollInterface.getText().trim());
                rememberProps.put("statusOperation", statusPollOperation.getText().trim());
                
                Vector vStat = new Vector();
                vStat.add(statPollHt);
                
                Hashtable dataPollHt = new Hashtable();
                dataPollHt.put("nameRef",dataColNameRef.getText().trim());
                dataPollHt.put("interface",dataColInterface.getText().trim());
                
                rememberProps.put("datacolNameRef", dataColNameRef.getText().trim());
                rememberProps.put("datacolInterface", dataColInterface.getText().trim());
                
                Vector vDat = new Vector();
                vDat.add(dataPollHt);
                p.put("STATUSPOLL_COMMAND",vStat);
                p.put("DATAPOLL_OBJECT",vDat);
                p.put("dictionary","Adsl.xml");//Currently hard coded
                if(processInBgCbox.isSelected()) {
                    p.put("Return Immediately After Submitting Request","true");
                }
                else {
                    p.put("Return Immediately After Submitting Request","false");
                }
                
                //To check this:
                CORBAClientSocketConn csc = CORBAClientSocketConn.getInstance();
                String returnVal = csc.addCORBANode(p);
                if(returnVal.indexOf("Successfully") == -1) {
                    statusPanel.setBackground(new Color(errCol[0],errCol[1],errCol[2]));
                    status.setForeground(Color.white);
                }else {
                    statusPanel.setBackground(new Color(infCol[0],infCol[1],infCol[2]));
                    status.setForeground(Color.black);
                }
                NmsClientUtil.normalCursor(this);
                status.setText(NmsClientUtil.GetString(returnVal));
                
                ((CardLayout)corbaPanel.getLayout()).show(corbaPanel, "corbaPage1");
            }
        }else if (action.equals(NmsClientUtil.GetString("javaclient.topo.addnode.clear"))) {
            JPanel panel = (JPanel)tabPane.getSelectedComponent();
            rememberProps=null;
            if (panel.getName().equals("snmpPanel")) {
                //node name
                nodeNameTxt.setText("");
                //netmask
                netmask1.setText("255");//No Internationalization
                netmask2.setText("255");//No Internationalization
                netmask3.setText("255");//No Internationalization
                netmask4.setText("0");//No Internationalization
                //disc props
                discoverCbox.setSelected(false);
                parentNetCbox.setSelected(true);
                overrideCbox.setSelected(false);
                updateCbox.setSelected(false);
                
                //snmp props
                communityTxt.setText("public");//No Internationalization
                portTxt.setText("161");//No Internationalization
                v3Cbox.setSelected(false);
                usernameTxt.setText("");
                contextnameTxt.setText("");
                snmpPanel.repaint();
            }else if (panel.getName().equals("tl1Panel")) {
                tl1HostTxt.setText("");
                tl1mask1.setText("255");//No Internationalization
                tl1mask2.setText("255");//No Internationalization
                tl1mask3.setText("255");//No Internationalization
                tl1mask4.setText("0");//No Internationalization
                discUnreachableCbox.setSelected(false);
                discParentnetCbox.setSelected(true);
                tl1overrideCbox.setSelected(false);
                tl1UpdateCbox.setSelected(false);
                tl1GroupCombo.setSelectedIndex(0);
                tl1Panel.repaint();
            }else if (panel.getName().equals("corbaPanel")) {
                orbHost.setText("");
                orbPort.setText("");
                orbNameRef.setText("");
                orbInterface.setText("");
                orbClass.setText("");
                moGrp.setText("");
                moType.setText("");
                moTester.setText("");
                
                statusPollInterface.setText("");
                statusPollNameRef.setText("");
                statusPollOperation.setText("");
                
                dataColInterface.setText("");
                dataColNameRef.setText("");
                ((CardLayout)corbaPanel.getLayout()).show(corbaPanel, "corbaPage1");//No Internationalization
                corbaPanel.repaint();
            }
            statusPanel.setBackground(new Color(infCol[0],infCol[1],infCol[2]));
            status.setForeground(Color.black);
            status.setText(NmsClientUtil.GetString("javaclient.topo.addnode.addnode"));
            NmsClientUtil.normalCursor(this);
        }
    }
    
    public void run() {
        NmsClientUtil.busyCursor(this);
        statusPanel.setBackground(new Color(errCol[0],errCol[1],errCol[2]));
        status.setForeground(Color.white);
        status.setText(NmsClientUtil.GetString("javaclient.topo.addnode.msg.processingbg"));
        NmsClientUtil.normalCursor(this);
        String tl1Message = tl1ClientSocConn.addTL1Node(p);
        statusPanel.setBackground(new Color(infCol[0],infCol[1],infCol[2]));
        status.setForeground(Color.black);
        status.setText(tl1Message);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNodeBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton clearBtn;
    private javax.swing.JButton closeBtn;
    private javax.swing.JLabel communityLbl;
    private javax.swing.JTextField communityTxt;
    private javax.swing.JLabel contextnameLbl;
    private javax.swing.JTextField contextnameTxt;
    private javax.swing.JPanel corbaPage1;
    private javax.swing.JPanel corbaPage2;
    private javax.swing.JPanel corbaPanel;
    private javax.swing.JPanel corbaPropPanel;
    private javax.swing.JTextField dataColInterface;
    private javax.swing.JTextField dataColNameRef;
    private javax.swing.JPanel dataPollPanel;
    private javax.swing.JPanel discConfPanel;
    private javax.swing.JLabel discParentNet;
    private javax.swing.JCheckBox discParentnetCbox;
    private javax.swing.JCheckBox discUnreachableCbox;
    private javax.swing.JLabel discUnreachableLbl;
    private javax.swing.JCheckBox discoverCbox;
    private javax.swing.JLabel discoverLbl;
    private javax.swing.JRadioButton ipv4;
    private javax.swing.JRadioButton ipv6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTextField moGrp;
    private javax.swing.JPanel moPropPanel;
    private javax.swing.JTextField moTester;
    private javax.swing.JTextField moType;
    private javax.swing.JTextField netmask1;
    private javax.swing.JTextField netmask2;
    private javax.swing.JTextField netmask3;
    private javax.swing.JTextField netmask4;
    private javax.swing.JLabel netmaskLbl;
    private javax.swing.JButton nextBtn;
    private javax.swing.JLabel nodeNameLbl;
    private javax.swing.JTextField nodeNameTxt;
    private javax.swing.JLabel nodeTypeLbl;
    private javax.swing.JTextField orbClass;
    private javax.swing.JTextField orbHost;
    private javax.swing.JTextField orbInterface;
    private javax.swing.JTextField orbNameRef;
    private javax.swing.JTextField orbPort;
    private javax.swing.JCheckBox overrideCbox;
    private javax.swing.JLabel overrideLbl;
    private javax.swing.JCheckBox parentNetCbox;
    private javax.swing.JLabel parentNetLbl;
    private javax.swing.JLabel portLbl;
    private javax.swing.JTextField portTxt;
    private javax.swing.JCheckBox processInBgCbox;
    private javax.swing.JPanel snmpConfPanel;
    private javax.swing.JPanel snmpPanel;
    private javax.swing.JLabel status;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JTextField statusPollInterface;
    private javax.swing.JTextField statusPollNameRef;
    private javax.swing.JTextField statusPollOperation;
    private javax.swing.JPanel statusPollPanel;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JLabel tl1DevGrp;
    private javax.swing.JComboBox tl1GroupCombo;
    private javax.swing.JLabel tl1Host;
    private javax.swing.JPanel tl1HostPanel;
    private javax.swing.JTextField tl1HostTxt;
    private javax.swing.JPanel tl1Panel;
    private javax.swing.JCheckBox tl1UpdateCbox;
    private javax.swing.JTextField tl1mask1;
    private javax.swing.JTextField tl1mask2;
    private javax.swing.JTextField tl1mask3;
    private javax.swing.JTextField tl1mask4;
    private javax.swing.JCheckBox tl1overrideCbox;
    private javax.swing.JLabel tl1overrideLbl;
    private javax.swing.JLabel tl1updateLbl;
    private javax.swing.JPanel topPanel;
    private javax.swing.JCheckBox updateCbox;
    private javax.swing.JLabel updateLbl;
    private javax.swing.JLabel usernameLbl;
    private javax.swing.JTextField usernameTxt;
    private javax.swing.JCheckBox v3Cbox;
    private javax.swing.JLabel v3Lbl;
    // End of variables declaration//GEN-END:variables
    private JApplet applet;
    private static TL1ClientSocketConn tl1ClientSocConn=null;
    private static Vector tl1DeviceGroupNames = null;
    private static boolean open = false;
    private int[]  infCol=new int[3];
    private int[] errCol=new int[3];
    private Properties p = null;
    private boolean returnImmediately= true;
    private Thread thr = null;
    boolean visible = false;
    //Properties set last time to remember values
    private static Properties rememberProps = null;
    
}
